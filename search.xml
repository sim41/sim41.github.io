<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bignuminc</title>
    <url>/2019/11/04/bignuminc/</url>
    <content><![CDATA[<h1 id="编程时使用的大数运算"><a href="#编程时使用的大数运算" class="headerlink" title="编程时使用的大数运算"></a>编程时使用的大数运算</h1><p>在编程中，有时候会遇到大数运算的情况（大于语言本身定义的最大长度的数的运算，一般都是64位）。在密码学或者自定义数据类型，如数据库中deicmal类型，定义了数的精度和比例(precision 精度，有效数字。scale不知道怎么翻译了…就是小数点的位数)。在这种情况下需要自己定义针对大数的运算。</p>
<a id="more"></a>

<h2 id="大数运算的原理"><a href="#大数运算的原理" class="headerlink" title="大数运算的原理"></a>大数运算的原理</h2><p>一般语言中提供的最大长度的数就是64位，8bytes，能表示的最大数是无符号类型的64位的数。想要存储更大的数，只要进行分段即可。算法也基本上都是基于竖式计算的方法进行分段运算。具体的算法和相关的优化此处就不讨论了。</p>
<h2 id="GO语言中的大数运算"><a href="#GO语言中的大数运算" class="headerlink" title="GO语言中的大数运算"></a>GO语言中的大数运算</h2><p>我日常主要使用C和go，这里也只讲这两种语言的大数运算。各种语言都会遇到大数运算的需求，因此我们也没必要去造轮子自己写一遍。</p>
<p>go的math/big包中就实现了大数运算的各种运算法则，还是很方便的，也就不再讲了。</p>
<h2 id="C语言中的大数运算"><a href="#C语言中的大数运算" class="headerlink" title="C语言中的大数运算"></a>C语言中的大数运算</h2><p>c语言的原则导致官方提供的库是很少的，但是这么多年的发展，也存在各种稳定的库实现。</p>
<h3 id="gmp"><a href="#gmp" class="headerlink" title="gmp"></a>gmp</h3><p>一般大数运算都是用<a href="https://gmplib.org/" target="_blank" rel="noopener">gmp库</a>，libgmp。用法也比较简单。编译时需要增加选项-lgmp进行链接。由于不符合我的要求所以没有深入了解。网上文章很多，就不造轮子了。</p>
<h3 id="openssl"><a href="#openssl" class="headerlink" title="openssl"></a>openssl</h3><p>openssl算是公认的加密算法库实现的标准了。一般系统中都内置了openssl库。既然是实现加密算法的，那一定需要用到大数运算。这次有大数运算的简单需求后，不想引入新的依赖，所以我想openssl内部的接口能否满足我的需求呢。经过查询发现&lt;openssl/bn.h&gt;中(bn =》bignumber)提供了大数运算的接口。网上的教程大多是错误的，通过查阅openssl的官方文档简单总结了一下openssl中大数运算的接口调用。</p>
<p><strong>definition</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BIGNUM	</span>	//<span class="keyword">struct</span></span><br><span class="line"><span class="keyword">BN_CTX	</span>	//<span class="keyword">struct</span></span><br><span class="line"><span class="keyword">BN_ULONG	</span>//unsigned long</span><br><span class="line"><span class="symbol">...</span></span><br></pre></td></tr></table></figure>

<p><strong>赋值</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BN_bn2bin</span><span class="params">(<span class="keyword">const</span> BIGNUM *a, <span class="keyword">unsigned</span> <span class="keyword">char</span> *to)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">BN_bn2binpad</span><span class="params">(<span class="keyword">const</span> BIGNUM *a, <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, <span class="keyword">int</span> tolen)</span></span>;</span><br><span class="line"> <span class="function">BIGNUM *<span class="title">BN_bin2bn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, BIGNUM *ret)</span></span>;</span><br></pre></td></tr></table></figure>

<p>BN_bn2bin 从大数存储结构转换为二进制数的字符串形式, to 为目标存储区，需要长度足够存二进制的数，形式是字符串%s</p>
<p>BN_bn2binpad 转换为二进制，用0填充到指定长度</p>
<p>BN_bin2bn     从正二进制字符串转换为big number结构</p>
<p>以上均为大端序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BN_bn2lebinpad</span><span class="params">(<span class="keyword">const</span> BIGNUM *a, <span class="keyword">unsigned</span> <span class="keyword">char</span> *to, <span class="keyword">int</span> tolen)</span></span>;</span><br><span class="line"> <span class="function">BIGNUM *<span class="title">BN_lebin2bn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, BIGNUM *ret)</span></span>;</span><br></pre></td></tr></table></figure>

<p>以上为小端序版本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">BN_bn2hex</span><span class="params">(<span class="keyword">const</span> BIGNUM *a)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">char</span> *<span class="title">BN_bn2dec</span><span class="params">(<span class="keyword">const</span> BIGNUM *a)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">BN_hex2bn</span><span class="params">(BIGNUM **a, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">BN_dec2bn</span><span class="params">(BIGNUM **a, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</span><br></pre></td></tr></table></figure>

<p>BN_bn2hex 从BIGNUM 转换为十六进制字符串</p>
<p>BN_bn2dec 从BIGNUM转换为十进制字符串</p>
<p>BN_hex2bn 从十六进制字符串转换为BIGNUM，可以带负号’-‘， 不带十六进制标示0x，总体呈现为“-deadbeef“</p>
<p>BN_dec2bn 从十进制转换为BIGNUM，可以带负号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BN_print</span><span class="params">(BIO *fp, <span class="keyword">const</span> BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BN_print_fp</span><span class="params">(FILE *fp, <span class="keyword">const</span> BIGNUM *a)</span></span>;</span><br></pre></td></tr></table></figure>

<p>以十六进制，带负号形式，打印存储的大数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BN_bn2mpi</span><span class="params">(<span class="keyword">const</span> BIGNUM *a, <span class="keyword">unsigned</span> <span class="keyword">char</span> *to)</span></span>;</span><br><span class="line"><span class="function">BIGNUM *<span class="title">BN_mpi2bn</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len, BIGNUM *ret)</span></span>;</span><br></pre></td></tr></table></figure>

<p>这一组函数很有用，在进行数据通信的时候，数据都是以十六进制流的形式通信。此处定义了一种格式，以4字节大端序表示数据长度，随后跟着同样以大端序呈现的数据。（转换输出后的结果会讲MSB最高有效位作为符号位使用，但是不知道为什么他自己的解析函数并没有解析符号位，还是以正数使用为主。（采用MSB表示的以null byte为前缀，这一句定义没有get到)</p>
<p><strong>运算</strong></p>
<p>运算的接口比较好理解，我用到的也不多，就不细说了。</p>
<p>openssl需要安装openssl-devel （或者形如libssl-devel等）。编译时需要使用-lcrypto 进行链接。</p>
<p><strong>[引用]</strong></p>
<p><a href="https://www.openssl.org/docs/man1.1.0/man3/BN_hex2bn.html" target="_blank" rel="noopener">openssl官方文档</a></p>
]]></content>
      <categories>
        <category>密码学</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>tools</title>
    <url>/2019/10/29/tools/</url>
    <content><![CDATA[<h1 id="生产工具"><a href="#生产工具" class="headerlink" title="生产工具"></a>生产工具</h1><p>在开发的过程中，逐渐摸索一些适合模块化、规模化的应用需要的开发环境，更新使用的生产工具。</p>
<a id="more"></a>

<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>现阶段还是以vim为主要生产工具，暂时还是vim的簇拥。</p>
<h4 id="base"><a href="#base" class="headerlink" title="base"></a>base</h4><p>一些基础环境配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">syntax <span class="built_in">enable</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line">filetype off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> et</span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> lbr</span><br><span class="line"><span class="built_in">set</span> fo+=mB</span><br><span class="line"><span class="built_in">set</span> sm</span><br><span class="line"><span class="built_in">set</span> selection=inclusive</span><br><span class="line"><span class="built_in">set</span> backspace=indent,eol,start</span><br></pre></td></tr></table></figure>

<p>主要是关于缩进等设置，这里将tab转化成了空格，关于这个问题看个人爱好与项目组的整体要求，统一就可以。</p>
<h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>vim的强大功能，将vim配置成IDE是靠各种插件的，这里主要放了一些我常用的插件。</p>
<h5 id="vundle"><a href="#vundle" class="headerlink" title="vundle"></a>vundle</h5><p>vundle是一个插件管理插件，方便插件的安装管理。</p>
<p>配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">"Vundle</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call vundle#begin()  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Plugin 'gmarik/Vundle.vim'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call vundle#end()</span></span><br></pre></td></tr></table></figure>

<p>上述配置使vundle生效，一般需要安装插件在Plugin项中写入仓库名$user/$repo即可，然后在vim中使用:PluginInstall进行下载安装。当然也可以直接把vim插件clone或者下载到~/.vim/bundle/目录下</p>
<h5 id="YCM"><a href="#YCM" class="headerlink" title="YCM"></a>YCM</h5><p>我主要是开发C，所以选择了大名鼎鼎的YouCompleteMe插件，这个在一些低版本的系统中的安装是很麻烦的，不过在高版本，如centos7中就比较容易安装了。</p>
<p>配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"ycm</span></span><br><span class="line"><span class="string">let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></span><br></pre></td></tr></table></figure>

<h5 id="插件列表"><a href="#插件列表" class="headerlink" title="插件列表"></a>插件列表</h5><p>现在使用的全部插件如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Plugin <span class="string">'gmarik/Vundle.vim'</span>  </span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span>  </span><br><span class="line">Plugin <span class="string">'fatih/vim-go'</span></span><br><span class="line">Plugin <span class="string">'scrooloose/nerdtree'</span></span><br><span class="line">Plugin <span class="string">'majutsushi/tagbar'</span></span><br><span class="line">Plugin <span class="string">'Raimondi/delimitMate'</span></span><br><span class="line">Plugin <span class="string">'DoxygenToolkit.vim'</span></span><br><span class="line"><span class="string">" uncommonly used</span></span><br><span class="line"><span class="string">"</span>	Plugin <span class="string">'mileszs/ack.vim'</span></span><br><span class="line"><span class="string">"	Plugin 'liuchengxu/graphviz.vim'</span></span><br></pre></td></tr></table></figure>

<h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>tmux用于分屏，实质是多会话</p>
<h3 id="cscope-ctags"><a href="#cscope-ctags" class="headerlink" title="cscope + ctags"></a>cscope + ctags</h3><p>看代码时必不可少的函数定义跳转gd和引用查询。当然看代码用sourceinsight一类的也是可以的。</p>
<h3 id="ag-the-silver-searcher"><a href="#ag-the-silver-searcher" class="headerlink" title="ag:the silver searcher"></a>ag:the silver searcher</h3><p>一个快速查找的引擎，很好用</p>
<h3 id="AStyle-indent"><a href="#AStyle-indent" class="headerlink" title="AStyle / indent"></a>AStyle / indent</h3><p>代码格式化，我一般使用K&amp;R风格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">indent -kr -i8</span><br></pre></td></tr></table></figure>

<p>或者使用AStyle。可以与vim绑定在每次保存退出时自动格式化，与gofmt类似。</p>
<h3 id="Doxygen-mscgen-graphviz"><a href="#Doxygen-mscgen-graphviz" class="headerlink" title="Doxygen mscgen graphviz"></a>Doxygen mscgen graphviz</h3><p>采用doxygen风格代码注释，配合DoxygenToolkit.vim使用，方便生成代码文档。mscgen是基于graphviz简化语法的绘图工具，可以嵌入到doxygen注释中，也可以独立使用。在生成一些不需要固定位置的图表时比较方便。</p>
<h3 id="Cunit-gcov-lcov"><a href="#Cunit-gcov-lcov" class="headerlink" title="Cunit gcov+lcov"></a>Cunit gcov+lcov</h3><p>单元测试框架与代码覆盖度。gcov是gcc自带的，lcov则是将gcov的结果可视化。</p>
<p>to be continue…</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>sql</title>
    <url>/2019/09/05/sql/</url>
    <content><![CDATA[<h1 id="有关SQL语句的一些思考"><a href="#有关SQL语句的一些思考" class="headerlink" title="有关SQL语句的一些思考"></a>有关SQL语句的一些思考</h1><p>日常关于SQL语句的一些想法，一点自己的见解，今天分享出来记录并提供更正和补全。主要是关于SQL语句的分类和原理的拙见。</p>
<a id="more"></a>

<h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><p>一般来说，SQL语句根据用途分为</p>
<ol>
<li><p>数据操作语言(DML：Data Manipulation Language)</p>
<p>由数据库管理系统(DBMS) 提供，用于让用户或程序员使用，实现对数据库中数据的操作。 主要包含 SELECT、 INSERT、 UPDATE、 DELETE、 MERGE、 CALL、 EXPLAIN PLAN、 LOCK TABLE等语句。</p>
</li>
<li><p>数据定义语言(DDL：Data Definition Language)</p>
<p>用于定义SQL模式、基本表、视图和索引的创建和撤消操作。 主要包含 CREATE、 ALTER、 DROP、 TRUNCATE、 COMMENT、 REPLACE(RENAME)等语句，一般不需要commit等事务操作。</p>
</li>
<li><p>数据控制语言(DCL：Data Control Language)</p>
<p>用于数据库授权、角色控制等管理工作。 主要包含 GRANT、 REVOKE等语句。</p>
</li>
<li><p>事务控制语言(TCL：Transaction Control Language)</p>
<p>用于数据库的事务管理。 主要包含 SAVEPOINT、 ROLLBACK、 COMMIT、 SET TRANSACTION等语句。</p>
</li>
</ol>
<p>这种分类方式是oracle给出的，网上可以查询到的也大多认可了此分类方式。不过今天谈的不是这种分类，以上仅作为参考。</p>
<h2 id="另一种分类"><a href="#另一种分类" class="headerlink" title="另一种分类"></a>另一种分类</h2><p>也算不上是分类吧，我个人的一点看法。因为我工作的性质，我更关注数据库协议相关的内容。按照数据库查询语句的生命周期和用途，也大致可以分为四种类型。</p>
<p>第一种是最简洁常用的操作/查询语句，其实与DML的定义差不多，在MySQL中就是query，ASE中叫language等等。这种语句的生命周期就是一次查询，一次完整请求对应一次完整响应，基本上不需要进行维护操作。</p>
<p>第二种是在基础查询语句上提供参数化的功能，可能叫参数化/模版/动态查询等等。这种语句也可以看作一种函数，将查询语句中的一些参数作为变量，有的支持变量命名，有的数据库只支持匿名参数。改语句的生命周期有一次查询语句的，此时多数由客户端进行维护，复用模版时自行进行参数化查询，然后附加参数的值。也有的生命周期存在于创建和释放模版之间，可以认为是在服务器注册了一个临时的函数。针对一次查询可以认为将参数替换后，也是一次交互，一次请求对一次响应。</p>
<p>第三种就是RPC。可以认为是函数，执行了一系列的查询操作。服务器一般都内置了很多的RPC，生命周期可以视为永久，不过针对结果来讲，还是一次请求对一次完整响应。自定义的RPC生命周期维护在创建和释放之间。</p>
<p>第四种就是游标。游标是针对查询结果的，生命周期一般是伴随着创建游标产生，附加在一条查询语句上，随着删除游标请求而释放。之所以需要游标，是很多查询是长期且返回很大的结果集的，我们不太可能一次性获取所有结果，游标可以让我们随着需要去取自己想要的数据。大部分游标不仅绑定在查询语句上，而且是与连接相关的，一旦连接断开，服务器会自动释放游标。不过也有些游标是由服务器维护，直到客户端请求释放才会结束游标的。</p>
<p>综上，第一种类型可以认为客户端不需要维护任何的生命周期，可以迅速的拿到请求与响应。第二种主要需要维护一条查询语句和一个参数列表。第三种一般需要维护一个RPC名称/查询语句和可能的参数列表。而第四种需要维护的就比较多了，要维护游标id，查询语句，参数，以及需要用到的结果集。</p>
<p>其实好像这篇比较水，主要是想到一些就记下来了。</p>
]]></content>
      <categories>
        <category>database</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>caculator</title>
    <url>/2019/09/03/caculator/</url>
    <content><![CDATA[<h1 id="10-10-他为什么等于0-11"><a href="#10-10-他为什么等于0-11" class="headerlink" title="10% + 10% 他为什么等于0.11"></a>10% + 10% 他为什么等于0.11</h1><p>好久没有更新了，最近比较忙。昨天微博上突然「曝光」(现在这个词都只有读bào光了，高考的时候还是pù光，歪题了)出好多安卓手机的简单计算器在计算10%+10%时居然给出了结果是0.11，不是人们预想的0.2=20%。</p>
<a id="more"></a>

<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>先描述现象，简单计算器中，计算某项加或减百分数。xx + n% / xx - n%</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">BNF表示：</span><br><span class="line">PERCENT ::= &#123;expr&#125; &lt;+|-&gt; (&lt;num&gt;<span class="string">"%"</span>)</span><br></pre></td></tr></table></figure>

<p>此时计算器会将算式解释为 xx 为某个计算结果，+/-n%代表着对当前计算结果进行+/-n%倍的计算。例如昨天产生的争议10% + 10%，被解释为10% + 10% * 10%。事实上前边的表达式为纯数字/计算结果时，也会有同样的现象。例如6 + 10%，计算结果为6 + 6 *10% = 6.6。这种现象其实在Windows计算器的标准模式下也会出现，还有一干的安卓计算器的简单模式。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>再说结论，先把结论放上来，有兴趣的可以继续看，不想继续了解的看完结论就明白了。首先，结论是，这不是bug，这是产品特性。因为在这些计算器里就是这样定义百分数计算的。这些计算器将+/-百分数的计算解释为对之前的结果进行加/减比例的计算。</p>
<p>之所以这样做，是因为在设计计算器的算法时，出于一个前提，即人们很少计算百分数的直接加减法，更常见的是诸如在计算税收，利息等等问题时，会对某个结果进行（1 + n%）的计算。比如存款10000元，年利息5%，一年后的存款为10000 + 5%，得到10500。计算器一般都是边解释边进行计算的，所以实时都会出现一个当前结果。也可能早起的计算器屏幕有限，输入方法不够友好，所以不方便输入1 * （1 + 10%）这种结合，所以有这种设计。</p>
<p>而针对乘法/除法，用户的需求就是直接对某个数计算百分比倍数，所以和我们通常认知的结果是一致的。</p>
<p>所以这种现象只是产品设计，不是bug，windows和安卓都存在。安卓软件可能用了相同的开源组件/库或者内置计算器等，而部分手机没有采用这种解决方案。至于看到一些乱分析说自己是学计算机的，这种明显就是浮点数的问题blabla的，笑一笑就ok了。结论很简单，是审计问题，不是bug，是「产品经理」的锅hhh。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我最开始也以为是语义分析一类做错了导致的bug，后来一想，计算器一般都采用的是逆波兰式进行分析计算的，应该不存在二义性，而且简单计算器都是一边计算一边出结果的，显然不会有这样的bug。后来发现微软在Windows中的计算器也是这样设计的，那应该是某种设计问题。刚好微软的计算器开源了，那我们找一下他们是怎样实现的。</p>
<p>Windows计算器中的标准模式中对于百分数计算的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> IDC_PERCENT:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// If the operator is multiply/divide, we evaluate this as "X [op] (Y%)"</span></span><br><span class="line">            <span class="comment">// Otherwise, we evaluate it as "X [op] (X * Y%)"</span></span><br><span class="line">            <span class="keyword">if</span> (m_nOpCode == IDC_MUL || m_nOpCode == IDC_DIV)</span><br><span class="line">            &#123;</span><br><span class="line">                result = rat / <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = rat * (m_lastVal / <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这样逻辑就十分清晰了，注释中也解释了会将加减百分数计算解释为result = pre-result * persent / 100（1 + 10%解释为 1 + 1 * 10 / 100)</p>
<p>至于逆波兰式，有兴趣的话我可以再写一篇解释一下解释过程和计算过程。</p>
<p>参考：</p>
<blockquote>
<p>Microsoft github caculator</p>
<p><a href="https://github.com/microsoft/calculator/blob/2826d370565092dfca9a983a5fc6ec0b8b1c62e1/src/CalcManager/CEngine/scifunc.cpp" target="_blank" rel="noopener">https://github.com/microsoft/calculator/blob/2826d370565092dfca9a983a5fc6ec0b8b1c62e1/src/CalcManager/CEngine/scifunc.cpp</a></p>
<p>row 79</p>
</blockquote>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理,语义分析</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2019/08/23/mysql-parser/</url>
    <content><![CDATA[<p>mysql parser</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">%type &lt;lexer.charset&gt;</span><br><span class="line">        opt<span class="number">_</span>collate</span><br><span class="line">       	charset<span class="number">_n</span>ame</span><br><span class="line">        old<span class="number">_</span>or<span class="number">_n</span>ew<span class="number">_</span>charset<span class="number">_n</span>ame</span><br><span class="line">        old<span class="number">_</span>or<span class="number">_n</span>ew<span class="number">_</span>charset<span class="number">_n</span>ame<span class="number">_</span>or<span class="number">_</span><span class="keyword">default</span></span><br><span class="line">        collation<span class="number">_n</span>ame</span><br><span class="line">        opt<span class="number">_</span>load<span class="number">_</span>data<span class="number">_</span>charset</span><br><span class="line">        UNDERSCORE<span class="number">_</span>CHARSET</span><br><span class="line">        ascii unicode</span><br><span class="line">        <span class="keyword">default</span><span class="number">_</span>charset 		   <span class="keyword">default</span><span class="number">_</span>collation</span><br></pre></td></tr></table></figure>

<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">create:</span><br><span class="line">          CREATE DATABASE opt_if_not_exists ident</span><br><span class="line">          &#123;</span><br><span class="line">            L<span class="function"><span class="title">ex</span>-&gt;</span><span class="function"><span class="title">create_info</span>= YYTHD-&gt;</span>alloc_typed&lt;HA_CREATE_INFO&gt;();</span><br><span class="line">            <span class="function"><span class="title">if</span> (Lex-&gt;</span>create_info == NULL)</span><br><span class="line">              MYSQL_YYABORT; <span class="comment">// OOM</span></span><br><span class="line">            L<span class="function"><span class="title">ex</span>-&gt;</span><span class="function"><span class="title">create_info</span>-&gt;</span>default_table_charset= NULL;</span><br><span class="line">            L<span class="function"><span class="title">ex</span>-&gt;</span><span class="function"><span class="title">create_info</span>-&gt;</span>used_fields= <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">create_database_option:</span></span><br><span class="line">          default_collation</span><br><span class="line">          &#123;</span><br><span class="line">            if (set_default_collation(Lex-&gt;create_info, <span class="variable">$Extra</span> close brace <span class="keyword">or</span> missing open brace1))</span><br><span class="line">              MYSQL_YYABORT;</span><br><span class="line">          &#125;</span><br><span class="line">        | default_charset</span><br><span class="line">          &#123;</span><br><span class="line">            if (set_default_charset(Lex-&gt;create_info, <span class="variable">$1</span>))</span><br><span class="line">              MYSQL_YYABORT;</span><br><span class="line">          &#125;</span><br><span class="line">        | default_encryption</span><br><span class="line">          &#123;</span><br><span class="line">            /<span class="regexp">/ Validate if we have either 'y|Y' or 'n|N'</span></span><br><span class="line"><span class="regexp">            if (my_strcasecmp(system_charset_info, $Misplaced &amp;1.str, "Y") != 0 &amp;&amp;</span></span><br><span class="line"><span class="regexp">                my_strcasecmp(system_charset_info, $1.str, "N") != 0) &#123;</span></span><br><span class="line"><span class="regexp">              my_error(ER_WRONG_VALUE, MYF(0), "argument (should be Y or N)", $1.str);</span></span><br><span class="line"><span class="regexp">              MYSQL_YYABORT;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">​        Lex-&gt;create_info-&gt;encrypt_type= $1;</span></span><br><span class="line"><span class="regexp">​        Lex-&gt;create_info-&gt;used_fields |= HA_CREATE_USED_DEFAULT_ENCRYPTION;</span></span><br><span class="line"><span class="regexp">​      &#125;</span></span><br><span class="line"><span class="regexp">​    ;</span></span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>​    </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">create_table_option:</span><br><span class="line">  | default_charset</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="symbol">$</span><span class="symbol">$</span>= NEW_PTN PT_create_table_default_charset(<span class="symbol">$</span><span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       | default_collation</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="symbol">$</span><span class="symbol">$</span>= NEW_PTN PT_create_table_default_collation(<span class="symbol">$</span><span class="number">1</span>);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">default_charset:</span><br><span class="line">          opt_default character_set opt_equal charset_name &#123; <span class="symbol">$</span><span class="symbol">$</span> = <span class="symbol">$</span><span class="number">4</span>; &#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">default_collation:</span><br><span class="line">          opt_default COLLATE_SYM opt_equal collation_name &#123; <span class="symbol">$</span><span class="symbol">$</span> = <span class="symbol">$</span><span class="number">4</span>;&#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">default_encryption:</span><br><span class="line">          opt_default ENCRYPTION_SYM opt_equal TEXT_STRING_sys &#123; <span class="symbol">$</span><span class="symbol">$</span> = <span class="symbol">$</span><span class="number">4</span>;&#125;</span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>openssh</title>
    <url>/2019/06/20/openssh/</url>
    <content><![CDATA[<h1 id="openssh"><a href="#openssh" class="headerlink" title="openssh"></a>openssh</h1><p>最近由于到期末，一致在忙着交结课作业，还要临时抱佛脚准备期末考试，日常熬夜到2，3点。没什么时间更新，继续旧文新更。还是一篇去年的关于ssh的文章，有关openssh的使用说明。ssh篇至此完结。</p>
<a id="more"></a>


<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装openssh客户端"><a href="#安装openssh客户端" class="headerlink" title="安装openssh客户端"></a>安装openssh客户端</h3><ul>
<li>默认安装了openssh客户端</li>
<li>软件包安装:apt,yum,rpm</li>
<li>源码编译安装,下载源码(下载支持库)</li>
</ul>
<h3 id="安装openssh服务器"><a href="#安装openssh服务器" class="headerlink" title="安装openssh服务器"></a>安装openssh服务器</h3><p>openssh-server</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>sshd_config</p>
<h4 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h4><p><strong>基本配置</strong></p>
<ul>
<li>Port 22:　　监听的端口</li>
<li>ListenAddress 0.0.0.0:　　监听的地址,0.0.0.0代表监听本地的所有已经启用的IP</li>
<li>Portocol 2:　　ssh协议版本号</li>
<li>LogLevel INFO:　　日志级别(INFO级别)</li>
</ul>
<p><strong>认证相关</strong></p>
<ul>
<li>Allow user,…:　　允许登陆的用户</li>
<li>Allow group,…:　允许登陆的用户组</li>
<li>Deny user,…:　　禁止登陆的用户</li>
<li>Deny group,…:　　禁止登陆的用户组</li>
<li>LoginGraceTime 20s:　　登陆超时</li>
<li>PermitRootLogin no:　　允许root登陆</li>
<li>MaxAuthTries 6:　　输入密码允许次数,达到次数后一段时间不可登陆</li>
<li>MaxSessions 10:　　最大同时打开会话数</li>
<li>RSAAuthentication yes:　　是否启用RSA认证</li>
<li>PubkeyAuthentication yes:　是否启用公钥认证</li>
<li>PasswordAuthentication no:　　是否启用密码认证</li>
<li>PermitEmptyPasswords no:　是否允许空密码登陆</li>
<li>ClientAliveInterval 300:　会话超时时间</li>
<li>ClientAliveCountMax 3:　　会话超时次数判断</li>
</ul>
<h4 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h4><p><strong>名称</strong></p>
<p>sshd_config:　　OpenSSH SSH守护进程配置文件</p>
<p><strong>描述</strong></p>
<p>sshd从/etc/ssh/sshd_config(或在命令行中用-f指定配置文件)读取配置数据.该文件包含每行一个关键字-参数对.对于每个关键字,使用第一个获得的值.’#’和空行开始的行解释为注释.包含空格的参数可以使用双引号(“”)包含在内</p>
<p>关键字不区分大小写,参数区分大小写</p>
<p>关键字列表</p>
<p><strong>时间格式</strong></p>
<p>sshd命令行参数和配置文件选项中指定时间的参数,可以用time[qualifier]的格式表示,qualifier代表时间单位,由以下值:</p>
<pre><code>- &lt;none&gt;    seconds 单位为空时默认为s
- s|S    seconds
- m|M    minutes
- h|H    hours
- d|D    days
- w|W    weeks</code></pre><p><strong>TOKENS(标记)</strong></p>
<p>某些关键字的参数可以使用标记符进行传递</p>
<pre><code>%%        字义的&apos;%&apos;本身
%D        接收到的传入连接的路由域
%F        CA密钥的指纹
%f        证书木有的指纹
%h        用户的home目录地址
%i        证书的密钥ID
%K        base64编码的CA密钥
%k        base64编码的认证密钥/证书
%s        证书序列号
%T        CA密钥的类型
%t        证书密钥的类型
%u        用户名</code></pre><p>AuthorizedKeysCommand 接受 %%, %f, %h, %k, %t, 和 %u.</p>
<p>AuthorizedKeysFile    接受 %%, %h, 和 %u.</p>
<p>AuthorizedPrincipalsCommand 接受 %%, %F, %f, %h, %i, %K, %k, %s, %T, %t, 和 %u.</p>
<p>AuthorizedPrincipalsFile 接受 %%, %h, 和 %u.</p>
<p>ChrootDiretory 接受%%, %h, 和 %u.</p>
<p>RoutingDomain  接受%D.传入</p>
<p><strong>文件</strong></p>
<p>sshd的配置在/etc/ssh/sshd_config中,该文件只能由root用户写入,但建议是(非必须)全局可读的</p>
<h3 id="服务器进程"><a href="#服务器进程" class="headerlink" title="服务器进程"></a>服务器进程</h3><p>sshd OpenSSH SSH守护进程</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshd [-46DdeiqTt] [-C connection_spec] [-c host_certificate_file] [-E log_file] [-f config_file] [-g login_grace_time] [-h host_key_file] [-o option] [-p port] [-u len]</span><br></pre></td></tr></table></figure>

<h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><p>sshd(OpenSSH Daemon)是ssh的守护进程.sshd监听来自客户端的连接,通常从/etc/rc中的启动项开始.该进程为每个传入分配一个新的守护进程</p>
<p><strong>选项</strong></p>
<p>-4</p>
<blockquote>
<p>强制sshd仅使用IPv4地址</p>
</blockquote>
<p>-6</p>
<blockquote>
<p>强制sshd仅使用IPv6地址</p>
</blockquote>
<p>-C connection_spec</p>
<blockquote>
<p>指定用于-T扩展测试模式的连接参数.提供参数,配置文件中可能会应用的任何Match指令都将在配置写入标准输出之前应用.参数以key-value值对的形式提供.可以使用多个-C选项想或逗号分隔列表.关键字包括addr(元地址),user(用户),host(主机名),laddr(本地地址),lport(本地端口号)和rdomain(路由域)</p>
</blockquote>
<p>-c host_certificate_file</p>
<blockquote>
<p>指定用于在密钥交互期间证明sshd的证书路径.证书文件必须与使用-h选项或HostKey配置指令指定的主机密钥文件匹配</p>
</blockquote>
<p>-D</p>
<blockquote>
<p>选定该模式,sshd不会分叉并不会成为守护进程.该模式可以简易监听sshd</p>
</blockquote>
<p>-d</p>
<blockquote>
<p>Debug模式.服务器不会进入后台模式,发送明确的debug输出到标准错误信息.服务器不会分支并只会处理一个连接.多重-d选项增加了调试级别,最高为3</p>
</blockquote>
<p>-E log_file</p>
<blockquote>
<p>将调试日志写入log_file而不是系统日志</p>
</blockquote>
<p>-e</p>
<blockquote>
<p>将调试日志写入标准错误而不是系统日志</p>
</blockquote>
<p>-f config_file</p>
<blockquote>
<p>指定配置文件的名称.缺省值是/etc/ssh/sshd_config.如果没有配置文件,sshd拒绝启动</p>
</blockquote>
<p>-g　login_grace_time</p>
<blockquote>
<p>为客户端身份验证时间进行限制(默认120秒).如果客户端在限定时间内为能对用户进行身份验证,则服务器将断开连接并退出.值为0表示没有限制</p>
</blockquote>
<p>-h host_key_file</p>
<blockquote>
<p>指定读取主机密钥的文件.如果sshd不是以超级用户身份运行,则必须给出该选项(因为通常主机密钥文件不能被除root以外的任何人读取).缺省值是/etc/ssh/ssh_host_ecdsa_key, /etc/ssh/ssh_host_ed25519_key和/etc/ssh/ssh_host_rsa_key.对于不同的主机密钥算法可能有多个主机密钥文件</p>
</blockquote>
<p>-i</p>
<blockquote>
<p>指定从inetd运行sshd</p>
</blockquote>
<p>-o option</p>
<blockquote>
<p>为可用于配置文件的格式提供选项.这对于指定没有单独的命令行标志的选项很有用.这些选项的配置值在sshd_config中</p>
</blockquote>
<p>-p port</p>
<blockquote>
<p>指定服务器监听连接的端口(缺省值为22).多个端口选项是允许的.当指定命令行端口时,配置文件中使用Port选项指定的设置将会被忽略.使用ListenAddress选项指定的端口会覆盖命令行端口</p>
</blockquote>
<p>-q</p>
<blockquote>
<p>静音模式.什么都不会发送到系统日志.通常记录每个连接的开始,认证和终止</p>
</blockquote>
<p>-T</p>
<blockquote>
<p>扩展测试模式.检查配置文件的有效性,将有效配置输出到标准输出流;或者通过使用一个或多个-C选项指定连接参数来应用匹配规则</p>
</blockquote>
<p>-t</p>
<blockquote>
<p>测试模式.只检查配置文件的有效性和密钥的完整性.对于可靠地更新sshd很有用,因为配置选项可能会更改</p>
</blockquote>
<p>-u len</p>
<blockquote>
<p>该选项用于指定存储远程主机名的utmp结构的字段大小.如果解析的主机名比len长,则会使用点分十进制.这允许具有很长主机名的主机溢出该字段后仍然被唯一标识.指定-u0 表示只应将点分十进制地址放入utmp文件中.-u0也可以用来防止sshd发出DNS请求,除非认证机制或配置需要.可能需要DNS身份验证机制包括HostbasedAuthentication并在密钥文件中使用from=”pattern-list”选项.需要DNS的配置选项包括在AllowUsers或DenyUsers中使用USER@HOST模式</p>
</blockquote>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ol>
<li><p>sshd只支持SSH2协议.每台主机都有一个主机专用密钥,用于识别主机.每当客户端连接时,守护进程都会使用其公共主机密钥进行响应.客户端将主机密钥与自己的数据库进行比较,验证其是否更改.</p>
</li>
<li><p>通过Diffie-Hellman密钥协议提供前向安全性.该密钥协议产生共享会话密钥.会话的其余部分使用堆成加密,当前使用128位AES, Blowfish, 3DES, CAST128, Arcfour, 192位AES或256位AES.客户端选择使用服务器提供的加密算法.此外,会话完整性通关过加密消息认证代码(hmac-md5, hmac-sha1, umac-64, umac-128, hmac-sha2-256或hmac-sha2-512)提供.</p>
</li>
<li><p>服务器和客户端进入认证对话框.客户端尝试使用基于主机的身份验证,公钥身份验证,键盘交互(质询-挑战)验证或密码身份验证方式进行身份验证.</p>
</li>
</ol>
<p>如果客户端成功进行身份验证,则会输入用于准备会话的对话框.此时,客户端可能会请求分配伪终端,转发X11连接,转发TCP连接或通过安全通道转发身份验证代理连接等操作.</p>
<p>此后客户端请求一个shell或执行一个命令,双方进入会话模式.此模式下,任何一方都可以随时发送数据,并将这些数据转发到服务器端的shell或命令以及客户端的用户终端</p>
<p>当用户程序终止且所有转发的X11和其他连接关闭时,服务器向客户端发送命令退出状态,双方退出</p>
<h4 id="登陆过程"><a href="#登陆过程" class="headerlink" title="登陆过程"></a>登陆过程</h4><p>当一个用户成功登陆时,sshd将会执行:</p>
<ol>
<li>如果登陆在tty上,且未指定任何命令,输出最后登陆时间和/etc/motd(除非文件中配置了保护选项)</li>
<li>如果登陆在tty上,记录登陆时间</li>
<li>检查/etc/nologin;如果存在,打印内容并退出(root以为)</li>
<li>更改以普通用户权限运行</li>
<li>建立级别的环境</li>
<li>如果文件存在,且允许用户更改其环境,读取文件~/.ssh/environment</li>
<li>更改用户的主目录</li>
<li>如果~/.ssh/rc存在并且设置了sshd_config中PermitUserRC选项,则运行它;否则,如果/etc/ssh/sshrc存在,运行它;否则运行xauth.</li>
<li>运行用户的shell或命令.所有的命令都在系统密码数据库中指定的用户登陆shell才可以运行</li>
</ol>
<h4 id="SSHRC"><a href="#SSHRC" class="headerlink" title="SSHRC"></a>SSHRC</h4><p>如果~/.ssh/rc文件存在,sh将会在读取环境配置文件后,启动用户shell或命令前执行.它不能在stdout上产生任何输出,而必须使用stderr.如果正在使用X11转发,将会在标准输入中接收到proto cookie对(并展示在X11环境中).该脚本必须调用xauth,因为sshd不会自动运行xauth来添加X11 cookie</p>
<p>该文件的主要目的时在用户的主目录可访问之前运行可能协议的任何初始化例程.</p>
<h4 id="AUTHORIZED-KEYS文件格式"><a href="#AUTHORIZED-KEYS文件格式" class="headerlink" title="AUTHORIZED_KEYS文件格式"></a>AUTHORIZED_KEYS文件格式</h4><p>AuthorizedKeysFile指定包含 用于公钥认证的公钥 的文件;如果未指定该项,则缺省值为~/.ssh/authorized_keys 和 ~/.ssh/authorized_keys2.</p>
<p>文件的每一行都包含一个关键字.公钥由以下空格分隔字段组成: options, keytype, base64-encoded key, comment. options选项字段时可选的,keytype密钥类型是:“ecdsa-sha2-nistp256”, “ecdsa-sha2-nistp384”, “ecdsa-sha2-nistp521”, “ssh-ed25519”, “ssh-dss” or “ssh-rsa”中的一种;commit注释字段不用于任何功能,方便识别</p>
<p>sshd强制执行1024位的最小RSA密钥模数大小</p>
<p><strong>选项</strong></p>
<p>选项由都会分隔的规范组成.除双引号外,不需要由空格</p>
<p>agent-forwarding</p>
<blockquote>
<p>代理转发,启用由restrict选项禁用的身份验证代理转发</p>
</blockquote>
<p>cert-authority</p>
<blockquote>
<p>证书中心,指定列出的密钥是可信的验证机构</p>
</blockquote>
<p>command=”command”</p>
<blockquote>
<p>指定只要使用该密钥进行身份验证就执行该命令.用户提供的密钥将会被忽略</p>
</blockquote>
<p>environment=”NAME=value”</p>
<blockquote>
<p>指定在使用该密钥登陆时要将字符串添加到环境中,此方式设置的环境变量会覆盖其他默认环境值.允许多个选项</p>
</blockquote>
<p>expiry-time=”timespec”</p>
<blockquote>
<p>指定密钥不会被接受的时间</p>
</blockquote>
<p>from=”pattern-list”</p>
<blockquote>
<p>指定除了公钥认证意外,远程主机的规范名称或其IP地址必须存在于逗号分隔的模式列表中</p>
</blockquote>
<p>no-agent-forwarding</p>
<blockquote>
<p>无代理转发,使用该密钥时禁止身份验证代理转发</p>
</blockquote>
<p>no-port-forwarding</p>
<blockquote>
<p>无端口转发,使用该密钥时禁止TCP转发.客户端的任何端口转发都会返回错误</p>
</blockquote>
<p>no-pty</p>
<blockquote>
<p>防止tty分配</p>
</blockquote>
<p>no-user-rc</p>
<blockquote>
<p>禁用~/.ssh/rc的执行</p>
</blockquote>
<p>no-X11-forwarding</p>
<blockquote>
<p>禁用X11转发</p>
</blockquote>
<p>primitopen=”host:port”</p>
<blockquote>
<p>限制使用ssh -L进行本地端口转发,使其只能连接到指定的主机和端口.可以通过将地址放在方括号中指定IPv6地址.多个规则用逗号分隔.</p>
</blockquote>
<p>port-forwarding</p>
<blockquote>
<p>启用由restrict选项禁用的端口转发</p>
</blockquote>
<p>principals=”principals”</p>
<blockquote>
<p>在cert-authority行上,以逗号分隔列表的形式指定允许的证书中心.至少一个证书机构协议存在于接受的可信机构中</p>
</blockquote>
<p>pty</p>
<blockquote>
<p>允许启用由restrict禁用的tty分配</p>
</blockquote>
<p>restrict</p>
<blockquote>
<p>启用所有限制,禁用端口,代理和X11转发,以及禁止PTY分配和执行~/.ssh/rc</p>
</blockquote>
<p>tunnel=”n”</p>
<blockquote>
<p>在服务器上请求tun设备.如没有该选项,客户端请求隧道,将使用下一个可用设备</p>
</blockquote>
<p>user-rc</p>
<blockquote>
<p>启用由restrict选项禁用的~/.ssh/rc</p>
</blockquote>
<p>X11-forwarding</p>
<blockquote>
<p>启用由restirct选项禁用的~/.ssh/rc</p>
</blockquote>
<h4 id="SSH-KNOWN-HOSTS文件格式"><a href="#SSH-KNOWN-HOSTS文件格式" class="headerlink" title="SSH_KNOWN_HOSTS文件格式"></a>SSH_KNOWN_HOSTS文件格式</h4><p>/etc/ssh/ssh_know_hosts/和~/.ssh/known_hosts文件中包含着已知主机的主机公钥.全局文件由管理员准备,并且每个用户文件都会自动维护:每当用户连接到未知主机时,其密钥都会添加到每个用户文件中</p>
<p>文件包含字段:markers(标记,可选项), hostnames(主机名), keytype(密钥类型), base64-encoded key(base64编码密钥), comment(注释).</p>
<p>markers:</p>
<blockquote>
<p>标记是可选的,但如果存在该字段,则必须是认证中心cert-authority中的一个(“@cert-authority”),表明该行包含CA密钥 或”@revorked”表示该密钥在该行被撤销,不能被接收</p>
</blockquote>
<p>hostnames:</p>
<blockquote>
<p>主机名是逗号分隔的模式列表(‘*’和’?’为通配符);每个模式依次与主机名匹配.</p>
</blockquote>
<blockquote>
<p>模式可以使用!来表示否定:如果主机名与否定模式相匹配,即使与另一模式相匹配,也不会被接收.主机名或地址可以可选地包含在’[‘ ‘]’中,然后以’:’加非标准端口表示</p>
</blockquote>
<blockquote>
<p>或者在公开的文件中,以散列形式存储主机名并隐藏主机名和地址</p>
</blockquote>
<p>keytype base64-encoded key</p>
<blockquote>
<p>keytype 和 base64编码的密钥直接从主机密钥中获取,可以从/etc/ssh/ssh_host_rsa_key.pub获取.可选的注释会持续到该行结尾</p>
</blockquote>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>ssh_config 客户端配置文件</p>
<h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>ssh以以下顺序获取配置信息:</p>
<ol>
<li>命令行选项</li>
<li>用户的配置文件(~/.ssh/config)</li>
<li>系统的全局配置文件(/etc/ssh/ssh_config)</li>
</ol>
<p>对于每个参数,将使用第一个获得的值,一般在文件开头附近提供主机特定声明,在结尾处提供默认值</p>
<p>使用key-value对表示参数,’#’和空行开始的行解释为注释</p>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字不区分大小写,参数区分大小写</p>
<p>host</p>
<blockquote>
<p>限制之后的参数声明仅限于给定模式匹配的主机.给定多个模式,以空格机型分隔.’*’为通配符,当个使用为所有主机提供全局默认值</p>
</blockquote>
<blockquote>
<p>可以使用’!’作为否定模式,该主机模式将会被忽略</p>
</blockquote>
<p>match</p>
<blockquote>
<p>只有满足match关键字后边的条件,才可以使用以后的参数声明.可用的标准关键字是:canonical, exec, host, originalhost, user 和 localuser.match条件可用单独使用,组合使用或使用’all’关键字表示全部匹配.’all’关键字只可以单独使用或在canonical后立即出现.其他关键字可用任意组合.除了canonical和all关键字,其他的关键字都需要一个参数.可用通过’!’表示否定模式.</p>
</blockquote>
<blockquote>
<p>canonical关键字只有当配置文件被主机名规范重新分析后才发生匹配.对指定只有规范主机名才可以工作很有效</p>
</blockquote>
<blockquote>
<p>exec关键字执行用户shell中指定的命令.exec接收TOKENS中定义的token作为参数</p>
</blockquote>
<blockquote>
<p>其他关键字必须是单个条目或是逗号分隔的列表,且可用使用PATTERNNS中定义的通配符和否定运算符.Hostname或CanonicalizeHostname选项中有任何替换内容,则host关键字和目标主机名进行匹配.originalhost关键字匹配命令行中指定的主机名.user关键字匹配远程主机上的目标用户名.localuser关键字匹配运行ssh的本地用户名</p>
</blockquote>
<p>AddKeysToAgent</p>
<blockquote>
<p>指定密钥是否应该自动添加到正在运行的ssh-agent.参数为:yes, confirm, ask 或 no.参数设置为yes,且从文件加载密钥,则密钥及其密码将添加到具有默认生命周期的代理程序.设为confirm,则每次使用密钥时都需要进行确认.设为ask,则在添加密钥之前,ssh将需要使用该SSH_ASKPASS程序进行确认.设为no,则不向文件添加密钥</p>
</blockquote>
<p>AddressFamily</p>
<blockquote>
<p>指定地址族,参数:any,inet,inet6</p>
</blockquote>
<p>BatchMode</p>
<blockquote>
<p>批处理模式,参数yes/no.设定为yes,则密码/密码查询将被禁用</p>
</blockquote>
<p>BindAddress</p>
<blockquote>
<p>使用本地机器上的指定地址作为连接的源地址(只用于具有多个地址的系统),如果UsePrivilegedPort设定为yes,则该项不生效.</p>
</blockquote>
<p>BindInterface</p>
<blockquote>
<p>使用指定接口作为连接的源地址.同上</p>
</blockquote>
<p>CanonicalDomains</p>
<blockquote>
<p>启用CanonicalizeHostname时,此选项指定搜索目标主机的域后缀列表</p>
</blockquote>
<p>CanonicalizeFallbackLocal</p>
<blockquote>
<p>指定主机名规范化失败时是否失败并报错</p>
</blockquote>
<p>CanonicalizeHostname</p>
<blockquote>
<p>指定是否执行明确的主机名规范化.默认设为no,不执行任何名称重写,并让系统解析器处理所有主机名查找.如果设为yes,对不适用ProxyCommand的连接,尝试使用CanonicalDomains后缀和CanonicalizePermittedCNAMEs规则对于命令行中指定的主机名进行鬼画符.设为always,将会将规范化应用于代理连接</p>
</blockquote>
<p>CanonicalizeMaxDots</p>
<blockquote>
<p>指定在禁用规范化之前主机名中最大点数.默认为1</p>
</blockquote>
<p>CanonicalizePermittedCNAMEs</p>
<blockquote>
<p>指定规则用于在主机名进行规范化时是否应遵循CNAME.</p>
</blockquote>
<p>CertificateFile</p>
<blockquote>
<p>指定读取用户证书的文件</p>
</blockquote>
<p>ChallengeResponseAuthentication</p>
<blockquote>
<p>指定是否使用挑战-应答模式验证</p>
</blockquote>
<p>CheckHostIP</p>
<blockquote>
<p>默认为yes,ssh将另外检查呢known_hosts文件中的主机IP地址,以检测由于DNS欺骗导致的主机密钥发生更改,且无论StrictHostKeyChecking的设置,都会将目标主机的地址增加到进程的~/.ssh/known_hosts中.</p>
</blockquote>
<p>Ciphers</p>
<blockquote>
<p>指定支持的加密算法和偏好顺序.多个加密方式由逗号分隔.以’+’开头,会将指定的密码追加到默认集;以’-‘开头,将指定密码移除.支持的密码:</p>
<p>3DES-CBC<br>AES128-CBC<br>AES192-CBC<br>AES256-CBC<br>AES128-CTR<br>AES192-CTR<br>AES256-CTR<br><a href="mailto:aes128-gcm@openssh.com" target="_blank" rel="noopener">aes128-gcm@openssh.com</a><br><a href="mailto:aes256-gcm@openssh.com" target="_blank" rel="noopener">aes256-gcm@openssh.com</a><br><a href="mailto:chacha20-poly1305@openssh.com" target="_blank" rel="noopener">chacha20-poly1305@openssh.com</a></p>
</blockquote>
<blockquote>
<p>默认为</p>
<p><a href="mailto:chacha20-poly1305@openssh.com" target="_blank" rel="noopener">chacha20-poly1305@openssh.com</a>， 
AES128-CTR，AES192-CTR，AES256-CTR，<br>AES128-GCM @ openssh.com，AES256-GCM @ openssh.com</p>
</blockquote>
<p>ClearAllForwardings</p>
<blockquote>
<p>指定清楚配置文件或命令行指定的所有本地,远程和动态端口转发</p>
</blockquote>
<p>Compression</p>
<blockquote>
<p>指定是否压缩</p>
</blockquote>
<p>ConnectionAttempts</p>
<blockquote>
<p>指定退出尝试的次数(每秒一次)</p>
</blockquote>
<p>ConnectTimeout</p>
<blockquote>
<p>指定连接到SSH服务器时使用的超时</p>
</blockquote>
<p>ControlMaster</p>
<blockquote>
<p>通过单个网络连接启用多个会话的共享</p>
</blockquote>
<p>ControlPath</p>
<blockquote>
<p>指定ControlMaster中用于连接共享的控制套接字的路径,或指定字符串none来禁用连接共享.</p>
</blockquote>
<p>ControlPersist</p>
<blockquote>
<p>与ControlMaster配合使用,指定在初始客户端连接关闭后,主链接应在后台保持打开状态(等待将来的客户端连接)</p>
</blockquote>
<p>DynamicForward</p>
<blockquote>
<p>指定通过安全通道转发本地计算机上的TCP端口,然后使用应用程序协议确定从远程计算机连接到的位置.参数为[bind_address:]port</p>
</blockquote>
<p>EnableSSHKeysign</p>
<blockquote>
<p>在全局客户端配置文件/etc/ssh/ssh_config中设定,设定为yes,在主机验证方式时,看使用帮助程序</p>
</blockquote>
<p>EscapeChar</p>
<blockquote>
<p>设置转移字符</p>
</blockquote>
<p>ExitOnForwardFailure</p>
<blockquote>
<p>指定在无法及进行转发时,应该终止连接</p>
</blockquote>
<p>FingerprintHash</p>
<blockquote>
<p>指定显示密钥指纹的hash算法.可选项:md5和sha256(默认)</p>
</blockquote>
<p>ForwardAgent</p>
<blockquote>
<p>指定身份验证代理连接是否将被转发到远程计算机</p>
</blockquote>
<p>ForwardX11</p>
<blockquote>
<p>指定是否通过安全通道自动重定向X11连接并进行显示设置</p>
</blockquote>
<p>ForwardX11Trusted</p>
<blockquote>
<p>设为yes,远程X11客户端将获得原始X11主机的完全访问权</p>
</blockquote>
<p>GatewayPorts</p>
<blockquote>
<p>指定是否允许元辰个主机连接到本地转发的端口.默认条件下,ssh将本地端口转发绑定到回传地址,以防止其他远程主机连接到转发的端口</p>
</blockquote>
<p>GlobalKnownHostsFile</p>
<blockquote>
<p>指定用于全局主机密钥数据库的一个或多个文件,用空格分隔.缺省值是/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2</p>
</blockquote>
<p>GSSAPIAuthentication</p>
<blockquote>
<p>指定是否允许基于GSSAPI的用户认证</p>
</blockquote>
<p>GSSAPIDelegateCredentials</p>
<blockquote>
<p>转发(委托)凭据到服务器</p>
</blockquote>
<p>HashKnownHosts</p>
<blockquote>
<p>设定ssh将地址添加到~/.ssh/known_hosts时,是否hash主机名和地址</p>
</blockquote>
<p>HostbasedAuthentication</p>
<blockquote>
<p>指定是否尝试使用基于rhosts的公钥认证方法</p>
</blockquote>
<p>HostbasedKeyTypes</p>
<blockquote>
<p>以逗号分隔的模式列表指定基于主机的身份验证的密钥类型.默认值为:</p>
<p><a href="mailto:ecdsa-sha2-nistp256-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp256-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp384-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp384-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp521-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp521-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-ed25519-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-ed25519-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-rsa-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-rsa-cert-v01@openssh.com</a>, 
ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,<br>ssh-ed25519,ssh-rsa</p>
</blockquote>
<p>HostKeyAlgorithms</p>
<blockquote>
<p>指定客户端使用的主机密钥算法的顺序,默认值为:</p>
<p><a href="mailto:ecdsa-sha2-nistp256-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp256-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp384-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp384-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp521-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp521-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-ed25519-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-ed25519-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-rsa-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-rsa-cert-v01@openssh.com</a>, 
ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,<br>ssh-ed25519,ssh-rsa<br>可使用”ssh -Q key”查询可用密钥类型</p>
</blockquote>
<p>HostKeyAlias</p>
<blockquote>
<p>指定在主机密钥数据库文件中查看或保存主机密钥以及验证主机证书时,指定使用别名而不是实际主机名</p>
</blockquote>
<p>Hostname</p>
<blockquote>
<p>指定要登陆的真是主机名.可用来指定主机的昵称或缩写.参数接收TOKENS中的token.数字IP地址也是允许的.默认值是命令行中给出的名称</p>
</blockquote>
<p>IdentitiesOnly</p>
<blockquote>
<p>设定为ssh只能使用在shh_config文件中显式配置或在命令行上传递的身份认证和证书文件</p>
</blockquote>
<p>IdentityAgent</p>
<blockquote>
<p>指定用于与身份验证代理进行通信的UNIX-domain套接字.该选项覆盖SSH_AUTH_SOCK环境变量,可用于选择特定的代理.将套接字名称设置为”none”会禁用身份验证代理的使用.指定”SSH_AUTH_SOCK”将从SSH_AUTH_SOCK中读取位置</p>
</blockquote>
<p>IdentityFile</p>
<blockquote>
<p>指定读取用户的DSA,ECDSA,Ed25519或RSA认证标识的文件.默认值为~/.ssh/id_dsa. ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519, ~/.ssh/id_rsa.</p>
</blockquote>
<p>IgnoreUnknown</p>
<blockquote>
<p>如果在配置解析中遇到未知选项,则指定要忽略的未知选项的模式列表.尽早列在配置文件中(不会识别在其之前的未知选项)</p>
</blockquote>
<p>Include</p>
<blockquote>
<p>包含指定的配置文件.可指定多个路径名,可含通配符,对用户配置,可用包含对用户主目录的’~’shell的引用.如果在系统配置文件中,包含/etc/ssh</p>
</blockquote>
<p>IPQoS</p>
<blockquote>
<p>指定用于连接的IPv4服务类型或DSCP类.可用选择一个或两个参数,空格分隔.一个参数,用作包类;两个参数,第一个为交互式会话,第二个为非交互式会话</p>
</blockquote>
<p>KbdInteractiveAuthentication</p>
<blockquote>
<p>指定是否使用键盘交互身份验证方式</p>
</blockquote>
<p>KbdInteractiveDevices</p>
<blockquote>
<p>指定在键盘交互身份验证中使用的方法列表.多个方法名称用逗号分隔.可能是空或多个:bsdauth,pam和skey</p>
</blockquote>
<p>KexAlgorithms</p>
<blockquote>
<p>指定可用的KEX(密钥交换)算法.多个算法用逗号分隔.默认值是:</p>
<p>curve25519-sha256,<a href="mailto:curve25519-sha256@libssh.org" target="_blank" rel="noopener">curve25519-sha256@libssh.org</a>, 
ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,<br>diffie-hellman-group-exchange-sha256,<br>diffie-hellman-group16-sha512,<br>diffie-hellman-group18-sha512,<br>diffie-hellman-group-exchange-sha1,<br>diffie-hellman-group14-sha256,<br>diffie-hellman-group14-sha1</p>
</blockquote>
<p>LocalCommand</p>
<blockquote>
<p>指定成功连接到服务器后在本地计算机上执行的命令.命令字符串延伸到行的末尾,并于用户的shell一起执行</p>
</blockquote>
<p>LocalForward</p>
<blockquote>
<p>指定本地计算机上的TCP端口通过安全通道转发到远程计算机的指定主机和端口.第一个参数必须是[bind_address:]port,第二个参数必须是host:port.可通过将地址放在方括号中指定IPv6地址</p>
</blockquote>
<p>LogLevel</p>
<blockquote>
<p>提供从ssh记录消息时使用的详细级别</p>
</blockquote>
<p>MACs</p>
<blockquote>
<p>指定MAC算法的优先顺序.默认值为:</p>
<p><a href="mailto:umac-64-etm@openssh.com" target="_blank" rel="noopener">umac-64-etm@openssh.com</a>,umac-128-etm@openssh.com,<br><a href="mailto:hmac-sha2-256-etm@openssh.com" target="_blank" rel="noopener">hmac-sha2-256-etm@openssh.com</a>,hmac-sha2-512-etm@openssh.com,<br><a href="mailto:hmac-sha1-etm@openssh.com" target="_blank" rel="noopener">hmac-sha1-etm@openssh.com</a>, 
<a href="mailto:umac-64@openssh.com" target="_blank" rel="noopener">umac-64@openssh.com</a>,umac-128@openssh.com,<br>hmac-sha2-256,hmac-sha2-512,hmac-sha1</p>
</blockquote>
<p>NoHostAuthenticationForLocalhost</p>
<blockquote>
<p>禁用本地主机的主机认证(环回地址)</p>
</blockquote>
<p>NumberOfPasswordPrompts</p>
<blockquote>
<p>指定放弃访问的密码尝试次数,默认为3</p>
</blockquote>
<p>PasswordAuthentication</p>
<blockquote>
<p>设定设否使用密码认证方法</p>
</blockquote>
<p>PermitLocalCommand</p>
<blockquote>
<p>允许通过LocalCommand选项执行本地命令或使用’!command’在ssh中转义</p>
</blockquote>
<p>PKCS11Provider</p>
<blockquote>
<p>指定选用的PKCS#11提供者.该关键字的参数是ssh用PKCS#11共享库与存储用户RSA私钥的PKCS#11令牌进行通信</p>
</blockquote>
<p>Port</p>
<blockquote>
<p>指定在远程主机上使用的端口号,默认为22</p>
</blockquote>
<p>PreferredAuthentications</p>
<blockquote>
<p>指定客户端尝试验证方法的顺序.这使得客户端可用选择更偏好的验证方法.默认值是:</p>
<p>gssapi-with-mic,hostbased,publickey,<br>keyboard-interactive,password</p>
</blockquote>
<p>ProxyCommand</p>
<blockquote>
<p>指定用于连接到服务器的参数.命令字符串追加到行尾,并使用用户shell exec指令执行,以避免延迟shell进程.命令设置为none将禁用该选项.参数接受TOKENS中的token.冲动标准输入读取并写入标准输出.应连接到某台机器上运行的sshd服务器或在某处执行sshd -i</p>
</blockquote>
<p>ProxyJump</p>
<blockquote>
<p>以[user@]host[:port]或ssh URI形式指定一个或多个跳转代理.多个代理可用逗号分隔,且会顺序访问.该选项导致ssh先于指定的跳板主机建立ssh连接,然后建立向最终目标的TCP转发,与目标主机建立连接</p>
</blockquote>
<p>ProxyUseFdpass</p>
<blockquote>
<p>指定ProxyCommand将连接的文件描述符传递回ssh,而不是继续执行并传递数据</p>
</blockquote>
<p>PubkeyAcceptedKeyTypes</p>
<blockquote>
<p>指定接收公钥的密钥类型,默认值为:</p>
<p><a href="mailto:ecdsa-sha2-nistp256-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp256-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp384-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp384-cert-v01@openssh.com</a>, 
<a href="mailto:ecdsa-sha2-nistp521-cert-v01@openssh.com" target="_blank" rel="noopener">ecdsa-sha2-nistp521-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-ed25519-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-ed25519-cert-v01@openssh.com</a>, 
<a href="mailto:ssh-rsa-cert-v01@openssh.com" target="_blank" rel="noopener">ssh-rsa-cert-v01@openssh.com</a>, 
ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,<br>ssh-ed25519,ssh-rsa</p>
</blockquote>
<p>PubkeyAuthentications</p>
<blockquote>
<p>设定是否使用公钥验证方法</p>
</blockquote>
<p>RekeyLimit</p>
<blockquote>
<p>指定在会话密钥重新协商之前可用传输的最大数据量,可选项指定最大时间.第一个参数是最大数据量,以字节为单位(K,M,G),默认值在1G到4G之间.第二个可选参数是最大时间,以秒为单位,可使用TIME FORMATS中指定的任何单位</p>
</blockquote>
<p>RemoteCommand</p>
<blockquote>
<p>指定成功连接到服务器后在远程计算机上执行的命令.命令字符串追加到行的末尾,并与用户的shell一起执行</p>
</blockquote>
<p>RemoteForward</p>
<blockquote>
<p>指定通过安全通道转发远程计算机上的TCP端口.远程端口可用从本地计算机转发到指定的主机和端口;也可用充当SOCK4/5代理使远程客户端从本地连接到任意目标.第一个参数必须是[bind_address:]port;如果转发到特定的目标,则第二个参数必须是host:hostport,如果没有指定目标参数,则远程转发将被建立SOCKS代理</p>
</blockquote>
<blockquote>
<p>可用通过将地址放在[]中指定IPv6地址.可用指定多个转发,并在命令行上提供额外的转发.只有在远程计算机上使用root身份登陆,才能转发特权端口</p>
</blockquote>
<blockquote>
<p>如果port参数为0,则监听端口将在服务器上动态分配并在运行时报告给客户端</p>
</blockquote>
<blockquote>
<p>如果未指定bind_address,则默认仅绑定到回传地址.如果bind_address是’*’或一个空字符串,则转发请求在所有端口上监听.</p>
</blockquote>
<p>RequestTTY</p>
<blockquote>
<p>指定是否为会话请求伪终端.参数为:no,yes,force 或 auto.</p>
</blockquote>
<p>RevokedHostKeys</p>
<blockquote>
<p>指定撤销的主机公钥.此文件中列出的密钥将会被拒绝进行主机验证.将密钥指定为文本文件,每行列出一个公钥.如果此文件不存在或不可读,则所有主机都将拒绝主机身份验证</p>
</blockquote>
<p>SendEnv</p>
<blockquote>
<p>指定应将哪些本地环境变量发送到服务器.</p>
</blockquote>
<p>ServerAliveCountMax</p>
<blockquote>
<p>设置客户端未从服务器接收到任何返回信息的情况下服务器活动状态消息最大数量,达到数量时客户端端口服务器连接,并终止会话</p>
</blockquote>
<p>ServerAliveInterval</p>
<blockquote>
<p>设置以秒未单位的超时时间.超时后,如果没有从服务器收到数据,ssh将通过加密通道发送消息请求服务器的响应.默认为0,表示不发送</p>
</blockquote>
<p>StreamLocalBindMask</p>
<blockquote>
<p>设置为本地或远程端口转发创建Unix域套接字文件时的权限掩码umask.缺省值时0177,创建一个只能由所有者读写的Unix域套接字文件</p>
</blockquote>
<p>StreamLocalBindUnlink</p>
<blockquote>
<p>设置在创建新的Unix域套接字文件前是否删除现有的用于本地或远程端口转发的套接字文件</p>
</blockquote>
<p>StrictHostKeyChecking</p>
<blockquote>
<p>如果此标志设为”yes”,ssh将不会自动将主机密钥添加到~/.ssh/known_hosts文件,并拒绝连接到主机密钥已更改的主机.为避免中间人攻击提供保护.</p>
</blockquote>
<blockquote>
<p>如果设为”accept-new”,则ssh将自动将新主机密钥添加到用户已知的主机密钥,但不允许连接到已更改的主机.</p>
</blockquote>
<blockquote>
<p>如果设为”no”或”off”则ssh会自动将新主机密钥添加到用户已知主机文件中,并允许主机密钥更改的主机在限制条件下连接.<br>如果设为”ask”,则只有在用户确认了该行为后才会将新主机密钥添加到用户已知主机文件中,并将拒绝主机密钥已改变的主机</p>
</blockquote>
<p>SyslogFacility</p>
<blockquote>
<p>给出记录ssh日志消息的设备代码.有效值为:DAEMON, USER, AUTH, LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7. 默认值是USER.</p>
</blockquote>
<p>TCPKeepAlive</p>
<blockquote>
<p>指定系统是否向另一端发送TCP保持活动消息.发送该消息,如果连接死机或某台机器崩溃将会被反馈得知</p>
</blockquote>
<p>Tunnel</p>
<blockquote>
<p>在客户端和服务器之间请求设备转发.参数是: yes, point-to-point (第三层), ethernet (第二层), or no (默认).yes请求默认隧道模式,即point-to-point(点对点)模式</p>
</blockquote>
<p>TunnelDevice</p>
<blockquote>
<p>指定要在客户端(local_tun)和服务器(remote_tun)上打开的隧道tun设备.参数是local_tun[:remote_tun]这些设备可用数字ID或关键字”any”来指定.默认为any:any</p>
</blockquote>
<p>UpdateHostKeys</p>
<blockquote>
<p>规定ssh是否接收来自其他服务器沿着国通的新增主机密钥通知并将其加入已知主机文件中.</p>
</blockquote>
<p>UsePrivilegedPort</p>
<blockquote>
<p>规定是否将特权端口用于传出连接.默认为no,设为yes则ssh必须是root用户</p>
</blockquote>
<p>User</p>
<blockquote>
<p>指定登陆用户.</p>
</blockquote>
<p>UserKnownHostsFile</p>
<blockquote>
<p>指定用于主机密钥数据库的一个或多个文件,用空格分隔.默认为~/.ssh/known_hosts, ~/.ssh/known_hosts2</p>
</blockquote>
<p>VerifyHostKeyDNS</p>
<blockquote>
<p>指定是否使用DNS和SSHFP资源记录验证远程密钥.设置为yes,客户端将默认信任来自DNS的能够匹配安全指纹的密钥,并与设为ask一样处理不安全的指纹.设为ask,将会显示有关指纹匹配的信息,但用户仍然需要根据StrictHostKeyChecking选项确认新的主机密钥.</p>
</blockquote>
<p>VisualHostKey</p>
<blockquote>
<p>如果设为yes,则除了登陆时的指纹字符串和未知主机密钥意外,还会打印的ASCII art形式的远程主机密钥指纹</p>
</blockquote>
<p>XAuthLocation</p>
<blockquote>
<p>指定xauth程序的完整路径名</p>
</blockquote>
<h4 id="TOKENS-标记"><a href="#TOKENS-标记" class="headerlink" title="TOKENS(标记)"></a>TOKENS(标记)</h4><p>参数接受的标记为:</p>
<pre><code>%%    字面的%
%C    %l%h%p%r的哈希值
%d    本地用户的home(~)目录
%h    远程主机名
%i    本地用户ID
%L    本地主机名
%l    本地主机名,包含域名
%n    原始远程主机名,如命令行所示
%p    远程端口
%r    远程用户名
%T    如果请求隧道转发,则分配本地tun(4)或tap(4)网络接口,否则为&quot;NONE&quot;
%u    本地用户名</code></pre><p>Match exec 接受标记: %%, %h, %L, %l, %n, %p, %r, 和 %u.</p>
<p>CertificateFile 接受标记: %%, %d, %h, %l, %r, 和 %u.</p>
<p>ControlPath 接受标记: %%, %C, %h, %i, %L, %l, %n, %p, %r, 和 %u.<br>HostName 接受标记: %% 和 %h.<br>IdentityAgent 和IdentityFile 接受标记: %%, %d, %h, %l, %r, 和 %u.<br>LocalCommand 接受标记: %%, %C, %d, %h, %l, %n, %p, %r, %T, 和 %u.<br>ProxyCommand 接受标记: %%, %h, %p, 和 %r.<br>RemoteCommand 接受标记: %%, %C, %d, %h, %l, %n, %p, %r, 和 %u.</p>
<h3 id="客户端进程"><a href="#客户端进程" class="headerlink" title="客户端进程"></a>客户端进程</h3><p>ssh:OpenSSH SSH客户端(远程登陆程序)</p>
<h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><pre><code>ssh    [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J destination] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command]</code></pre><h4 id="参数解释-1"><a href="#参数解释-1" class="headerlink" title="参数解释"></a>参数解释</h4><p>-4</p>
<blockquote>
<p>强制sshd仅使用IPv4地址</p>
</blockquote>
<p>-6</p>
<blockquote>
<p>强制sshd仅使用IPv6地址</p>
</blockquote>
<p>-A</p>
<blockquote>
<p>启用身份验证代理连接的转发.也可以在每个主机的基础配置文件中设定</p>
</blockquote>
<p>-a</p>
<blockquote>
<p>禁用转发身份验证代理连接</p>
</blockquote>
<p>-B bind_interface</p>
<blockquote>
<p>尝试连接到远程主机的监听bind_interface接口</p>
</blockquote>
<p>-b bind_address</p>
<blockquote>
<p>使用本地的bind_address作为连接的源地址</p>
</blockquote>
<p>-C</p>
<blockquote>
<p>请求压缩所有数据.压缩算法与gzip使用的算法相同</p>
</blockquote>
<p>-c cipher_spec</p>
<blockquote>
<p>选择用于加密会话的密码规范.按优先顺序列出以逗号分隔的密码列表</p>
</blockquote>
<p>-D [bind_address:]port</p>
<blockquote>
<p>指定本地动态应用层端口转发.通过分配一个套接字监听本地端口port,可选地绑定到指定的监听地址bind_address.只要连接到此端口,就会通过安全通道转发连接,然后使用应用层协议确定从远程计算机连接到本地的位置.目前支持SOCKS4和SOCKS5,ssh充当SOCKS服务器.只有root可以转发特权端口.</p>
</blockquote>
<p>-E log_file</p>
<blockquote>
<p>将调试日志写入log_file中,而不输出到标准错误stderr中.</p>
</blockquote>
<p>-e escape_char</p>
<blockquote>
<p>设置在pty上进行会话的转义符(默认为”*”).只有行首的转义符才会被识别.在转义符后跟一个点(‘.’)关闭连接;跟随control-Z暂停连接;跟随该字符本身,发送一个转义字符.将该项设为”none”将禁用任何转义</p>
</blockquote>
<p>-F configfile</p>
<blockquote>
<p>指定一个可选的单个用户的配置文件.如果在命令行上给出配置文件,则系统的配置文件(/etc/ssh/ssh_config)将被忽略.用户的默认配置文件是~/.ssh/config</p>
</blockquote>
<p>-f</p>
<blockquote>
<p>请求ssh在命令执行前转到后台.在ssh询问口令或密码,但用户希望ssh在后台运行时很有用.在远程主机启动X11进程的推荐方式时使用ssh -f host xterm的方法</p>
</blockquote>
<p>-G</p>
<blockquote>
<p>让ssh在评估Host和Match块后打印其配置并退出</p>
</blockquote>
<p>-g</p>
<blockquote>
<p>运行远程主机连接到本地转发的端口.如果在多路复用连接上使用,则必须在主进程上指定此选项</p>
</blockquote>
<p>-I pkcs11</p>
<blockquote>
<p>指定ssh用于与PKCS#11令牌通信提供用户私钥所使用的PKCS#11共享库</p>
</blockquote>
<p>-i identity_file</p>
<blockquote>
<p>选择读取公钥认证方法的证明(即私钥)的文件.默认为~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 和 ~/.ssh/id_rsa.私钥所在文件也可以在配置文件中以主机为目标指定.可以由多个-i选项(以及配置文件中指定的多个身份).如果CertificateFile项没有明确指定证书,则ssh会尝试从加载-cert.pub获得的文件名来识别加载证书文件</p>
</blockquote>
<p>-J destination</p>
<blockquote>
<p>先与destination描述的跳转主机进行ssh连接,然后在跳转主机建立到最终目的地的TCP转发,实现连接目标主机.可以用逗号字符指定多个跳转节点.时指定ProxyJump配置的快捷方法</p>
</blockquote>
<p>-K</p>
<blockquote>
<p>启用基于GSSAPI的身份验证并将GSSAPI凭据转发到服务器</p>
</blockquote>
<p>-k</p>
<blockquote>
<p>禁用GSSAPI凭据转发到服务器</p>
</blockquote>
<p>-L [bind_address:]port:host:hostport<br><br>-L [bind_address:]port:remote_socket<br><br>-L local_socket:host:hostport<br><br>-L local_socket:remote_socket<br></p>
<blockquote>
<p>指定到本地主机(客户端)上给定TCP端口或Unix套接字的连接将转发到远程端的给定主机和端口或Unix套接字.</p>
</blockquote>
<p>-I login_name</p>
<blockquote>
<p>指定要在远程计算机上登陆的用户.</p>
</blockquote>
<p>-M</p>
<blockquote>
<p>将ssh客户端置为”master”模式进行连接共享</p>
</blockquote>
<p>-m mac_spec</p>
<blockquote>
<p>MAC算法按优先级指定的逗号分隔列表</p>
</blockquote>
<p>-N</p>
<blockquote>
<p>不执行远程命令,对转发端口很有用</p>
</blockquote>
<p>-n</p>
<blockquote>
<p>重定向标准输入stdin到/dev/null(防止从stdin读取).在ssh在后台运行时必须使用</p>
</blockquote>
<p>-O ctl_cmd</p>
<blockquote>
<p>控制活动连接复用进程.指定-O参数时,将解释ctl_cmd参数并将其传递给主进程.有效命令是:”check”,”forward”,”cancel”,”exit”和”stop”.</p>
</blockquote>
<p>-o option</p>
<blockquote>
<p>用于给出配置文件中使用的选项.选项列表为:</p>
<p>AddKeysToAgent<br>AddressFamily<br>BatchMode<br>BindAddress<br>CanonicalDomains<br>CanonicalizeFallbackLocal<br>CanonicalizeHostname<br>CanonicalizeMaxDots<br>CanonicalizePermittedCNAMEs<br>CertificateFile<br>ChallengeResponseAuthentication<br>CheckHostIP<br>Ciphers<br>ClearAllForwardings<br>Compression<br>ConnectionAttempts<br>ConnectTimeout<br>ControlMaster<br>ControlPath<br>ControlPersist<br>DynamicForward<br>EscapeChar<br>ExitOnForwardFailure<br>FingerprintHash<br>ForwardAgent<br>ForwardX11<br>ForwardX11Timeout<br>ForwardX11Trusted<br>GatewayPorts<br>GlobalKnownHostsFile<br>GSSAPIAuthentication<br>GSSAPIDelegateCredentials<br>HashKnownHosts<br>Host<br>HostbasedAuthentication<br>HostbasedKeyTypes<br>HostKeyAlgorithms<br>HostKeyAlias<br>HostName<br>IdentitiesOnly<br>IdentityAgent<br>IdentityFile<br>IPQoS<br>KbdInteractiveAuthentication<br>KbdInteractiveDevices<br>KexAlgorithms<br>LocalCommand<br>LocalForward<br>LogLevel<br>MACs<br>Match<br>NoHostAuthenticationForLocalhost<br>NumberOfPasswordPrompts<br>PasswordAuthentication<br>PermitLocalCommand<br>PKCS11Provider<br>Port<br>PreferredAuthentications<br>ProxyCommand<br>ProxyJump<br>ProxyUseFdpass<br>PubkeyAcceptedKeyTypes<br>PubkeyAuthentication<br>RekeyLimit<br>RemoteCommand<br>RemoteForward<br>RequestTTY<br>SendEnv<br>ServerAliveInterval<br>ServerAliveCountMax<br>StreamLocalBindMask<br>StreamLocalBindUnlink<br>StrictHostKeyChecking<br>TCPKeepAlive<br>Tunnel<br>TunnelDevice<br>UpdateHostKeys<br>UsePrivilegedPort<br>User<br>UserKnownHostsFile<br>VerifyHostKeyDNS<br>VisualHostKey<br>XAuthLocation</p>
</blockquote>
<p>-p port</p>
<blockquote>
<p>远程主机连接的目标端口</p>
</blockquote>
<p>-Q query_option</p>
<blockquote>
<p>查询ssh以获得支持ssh2的算法.可用的功能有:cipher(受支持的堆成加密方法) ,cipher-auth(支持的认证加密方法) ,mac(支持的mac算法) ,kex(密钥交互算法) ,key(密钥类型) ,key-cert(证书密钥类型) ,key-plain(无证书密钥类型),和protocol-version(支持的SSH协议版本)</p>
</blockquote>
<p>-q:</p>
<blockquote>
<p>静音模式.导致大多数警告和诊断消息不显示</p>
</blockquote>
<p>-R [bind_address:]port:host:hostport<br><br>-R [bind_address:]port:local_socket<br><br>-R remote_socket:host:hostport<br><br>-R remote_socket:local_socket<br><br>-R [bind_address:]port<br></p>
<blockquote>
<p>指定到远程主机(服务器)上给定的TCP端口或Unix套接字将被转发到本地端.通过分配套接字来监听TCP端口port或远程Unix套接字,并且从本地机器连接到由主机host或local_socket指定的显示目标;如果没有明确的目标指定,SSH作为一个SOCKS4/5代理</p>
</blockquote>
<p>-S ctl_path</p>
<blockquote>
<p>指定用于连接共享的控制套接字的位置,或者none禁用共享连接</p>
</blockquote>
<p>-s</p>
<blockquote>
<p>可用于请求调用远程系统上的子系统.</p>
</blockquote>
<p>-T</p>
<blockquote>
<p>禁用伪终端分配</p>
</blockquote>
<p>-t</p>
<blockquote>
<p>强制伪终端分配.可用于在远程机器上执行任意基于屏幕的程序</p>
</blockquote>
<p>-V</p>
<blockquote>
<p>显示版本号并退出</p>
</blockquote>
<p>-v</p>
<blockquote>
<p>详细模式.使ssh打印有关进程的调试信息.</p>
</blockquote>
<p>-W host:port</p>
<blockquote>
<p>请求在客户端的标准输入和标准输出通过安全通道转发到主机host上端口port</p>
</blockquote>
<p>-w local_tun[:remote_tun]</p>
<blockquote>
<p>使用指定的tun设备在客户端(local_tun)和服务器(remote_tun)之间请求隧道转发</p>
</blockquote>
<p>-X</p>
<blockquote>
<p>启用X11转发</p>
</blockquote>
<p>-x</p>
<blockquote>
<p>禁用X11转发</p>
</blockquote>
<p>-Y</p>
<blockquote>
<p>启用可信的X11转发</p>
</blockquote>
<p>-y</p>
<blockquote>
<p>使用syslog系统模块发送日志信息.默认情况下,日志信息发送到stderr</p>
</blockquote>
<h3 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h3><p>ssh-keygen:身份验证密钥生成,管理和转换</p>
<h4 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h4><p>1.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	[-q] [-b bits] [-t dsa | ecdsa | ed25519 | rsa] [-N new_passphrase] [-C comment] [-f output_keyfile]</span><br></pre></td></tr></table></figure>

<p>-q: </p>
<blockquote>
<p>静默调用ssh-keygen 在创建新密钥时由/etc/rc调用</p>
</blockquote>
<p>-b bits: </p>
<blockquote>
<p>指定要创建的密钥的位数.RSA最小1024位,默认2048位.DSA必须符合FIPS 186-2规定的1024位.ECDSA通过从三个椭圆曲线大小中选择一个确定该密钥长度:256/384/521位(其他长度会失败).Ed25519具有固定长度,-b标志被忽略</p>
</blockquote>
<p>-t dsa | ecdsa | ed25519 | rsa:</p>
<blockquote>
<p>指定要创建的密钥的类型</p>
</blockquote>
<p>-N new_passphrase: </p>
<blockquote>
<p>提供新的密码</p>
</blockquote>
<p>-C comment:</p>
<blockquote>
<p>注释</p>
</blockquote>
<p>-f filename(output_keyfile):</p>
<blockquote>
<p>文件名,这里用于输出密钥的文件名</p>
</blockquote>
<p>2.</p>
<pre><code>ssh-keygen    -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]</code></pre><p>-p:</p>
<blockquote>
<p>请求更改私钥文件的密码.程序提示输入包含私钥的文件,旧密码以及新密码两次</p>
</blockquote>
<p>-P passphrase(old_passphrase):</p>
<blockquote>
<p>提供密码,这里用于提供旧密码</p>
</blockquote>
<p>3.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-i [-m key_format] [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-i:</p>
<blockquote>
<p>以-m选项指定的格式读取未加密的私钥/公钥文件,并将与OpenSSH兼容的私钥/公钥输出到标准输出stdout.允许从其他软件导入密钥.默认导入格式是”RFC4716”</p>
</blockquote>
<p>-m key_format:</p>
<blockquote>
<p>指定导入(-i)或导出(-e)转换选项的密钥格式.支持的密钥格式是:”RFC4716”,”PKCS8”或”PEM”.默认的转换格式是”RFC4716”</p>
</blockquote>
<p>4.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-e [-m key_format] [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-e:</p>
<blockquote>
<p>读取OpenSSH公钥或私钥文件,并以-m选项指定的格式输出该密钥.默认的到处格式是”RFC4617”.允许到处OpenSSH密钥宫其他程序使用.</p>
</blockquote>
<p>5.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-y [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-y:</p>
<blockquote>
<p>读取一个OpenSSH格式私钥并输出对应的OpenSSH公钥文件</p>
</blockquote>
<p>6.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-c [-P passphrase] [-C comment] [-f keyfile]</span><br></pre></td></tr></table></figure>

<p>-c:</p>
<blockquote>
<p>请求更改私钥和公钥文件中的注释.仅支持比较新的OpenSSH格式存储的密钥.将提示输入包含私钥的文件,密钥的密码及新注释</p>
</blockquote>
<p>7.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-l [-v] [-E fingerprint_hash] [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-l:</p>
<blockquote>
<p>显示指定公钥的指纹.对于RSA和DSA密钥,会尝试查找匹配的公钥文件并打印其指纹.如果与-v结合使用个,会提供可视化的ASCII art形式的指纹图</p>
</blockquote>
<p>-v:</p>
<blockquote>
<p>详细模式.让ssh-keygen打印有关其进度的调试信息.多个-v选项增加详细程度,最大值为3</p>
</blockquote>
<p>-E fingerprint_hash:</p>
<blockquote>
<p>指定显示密钥指纹时的散列算法.有效选项:”md5”和”sha256”.默认为”sha256”</p>
</blockquote>
<p>8.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-B [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-B:</p>
<blockquote>
<p>显示指定私钥/公钥文件的bubble babble编码的摘要</p>
</blockquote>
<p>9.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-D pkcs11</span><br></pre></td></tr></table></figure>

<p>-D pkcs11:</p>
<blockquote>
<p>下载由PKCS#11共享库pkcs11提供的RSA公钥.与-s一起使用,表示CA密钥主流在PKCS#11令牌中</p>
</blockquote>
<p>10.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-F hostname [-f known_hosts_file] [-l]</span><br></pre></td></tr></table></figure>

<p>-F hostname:</p>
<blockquote>
<p>在knewn_hosts文件中搜索指定的主机名hostname,列出找到的所有项.配合-H选项以hash格式打印找到的密钥</p>
</blockquote>
<p>11.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-H [-f known_hosts_file]</span><br></pre></td></tr></table></figure>

<p>-H:</p>
<blockquote>
<p>hash一个known_hosts文件.将用指定文件中的hash表示体会所有主机名和地址;原始内容将被移到具有.old后缀的文件.hash值可以被ssh和sshd正常使用</p>
</blockquote>
<p>12.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-R hostname [-f known_hosts_file]</span><br></pre></td></tr></table></figure>

<p>-R hostname:</p>
<blockquote>
<p>从known_hosts文件中删除属于hostname的所有密钥</p>
</blockquote>
<p>13.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-r hostname [-f input_keyfile] [-g]</span><br></pre></td></tr></table></figure>

<p>-r hostname:</p>
<blockquote>
<p>打印指定公钥文件的hostname的SSHFP指纹资源记录</p>
</blockquote>
<p>14.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-G output_file [-v] [-b bits] [-M memory] [-S start_point]</span><br></pre></td></tr></table></figure>

<p>-G output_file:</p>
<blockquote>
<p>为DH-GEX生成候选素数.这些素数在使用前必须进行安全筛选(-T)</p>
</blockquote>
<p>-M memory:</p>
<blockquote>
<p>为DH-GEX生成候选模数时,指定要使用的内存大小(以M字节为单位)</p>
</blockquote>
<p>-S start_point:</p>
<blockquote>
<p>为DH-GEX生成候选模数时指定起始点(十六进制)</p>
</blockquote>
<p>15.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-T output_file -f input_file [-v] [-a rounds] [-J num_lines] [-j start_line] [-K checkpt] [-W generator]</span><br></pre></td></tr></table></figure>

<p>-T output_file:</p>
<blockquote>
<p>测试DH组交换候选素数(使用-G选项生成)以确保安全</p>
</blockquote>
<p>-a rounds:</p>
<blockquote>
<p>当保存新格式私钥(即ed25519密钥或设置-o选项)时,指定使用的KDF(密钥导出函数)循环次数.较高的次数导致密码验证较慢,但对清理密码破解的抵抗力增加.</p>
</blockquote>
<blockquote>
<p>当筛选DH-GEX候选模数时(-T命令).该选项指定要执行的素性测试的次数.</p>
</blockquote>
<p>-J num_lines:</p>
<blockquote>
<p>在使用-T选项执行DH候选模数筛选时筛选指定的行数后退出</p>
</blockquote>
<p>-K checkpt:</p>
<blockquote>
<p>在使用-T选项执行DH候选模数筛选时将最后一行的筛选进程写入checkpt.如果作业重新启动,将用于跳过输入文件中已处理的行</p>
</blockquote>
<p>-W generator:</p>
<blockquote>
<p>在测试DH-DEX的候选模量时指定所需的发生器</p>
</blockquote>
<p>16.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-s ca_key -I certificate_identity [-h] [-U] [-D pkcs11_provider] [-n principals] [-O option] [-V validity_interval] [-z serial_number] file ...</span><br></pre></td></tr></table></figure>

<p>-s ca_key:</p>
<blockquote>
<p>使用指定的CA密钥对公钥进行认证(签名).在生成KRL时,-s指定用于通过密钥ID或序列号直接撤销证书的CA公钥文件的路径</p>
</blockquote>
<p>-I certificate_identity:</p>
<blockquote>
<p>签署公钥时指定密钥身份</p>
</blockquote>
<p>-h:</p>
<blockquote>
<p>签署密钥时,创建主机证书而不是用户证书</p>
</blockquote>
<p>-U:</p>
<blockquote>
<p>与-s一起使用时,此选项表示CA密钥主流在ssh-agent中</p>
</blockquote>
<p>-n principals:</p>
<blockquote>
<p>在签署密钥时指定一个或多个委托人(用户名或主机名)包含在证书中.可用指定多个委托人,以逗号分隔</p>
</blockquote>
<p>-O option:</p>
<blockquote>
<p>签署密钥时指定过一个证书选项.有效选项为:</p>
<p>clear:       清除所有启用的权限<br>critical:name[=contents]<br>extension:name[=contents]<br>   包含任意证书关键选项或扩展名.指定的name应包含域名后缀(“<a href="mailto:name@example.com" target="_blank" rel="noopener">name@example.com</a>“).如果contents被指定,它作为扩展名/选项的内容以字符串格式编码被包含.<br>force-command=command<br>   当使用证书进行身份验证时,强制执行command而不是用户指定的任何shell或命令<br>no-agent-forwarding<br>   禁用代理转发<br>no-port-forwarding<br>   禁用端口转发<br>no-pty<br>   禁用pty分配<br>no-user-rc<br>   禁用通过sshd执行<del>/.ssh/rc<br>no-X11-forwarding<br>   禁用X11转发(以上禁用选项默认允许)<br>permit-agent-forwarding<br>   允许ssh-agent转发<br>permit-port-forwarding<br>   允许端口转发<br>permit-port-pty<br>   允许分配pty<br>permit-user-rc<br>   允许通过sshd执行</del>/.ssh/rc<br>permit-X11-forwarding<br>   允许X11转发<br>source-address=address_list<br>   限制证书认为有效的源地址.ADDRESS_LIST时逗号分隔的CIDR格式的一个或多个地址/网络掩码对的列表</p>
</blockquote>
<p>-V validity_interval:</p>
<blockquote>
<p>签署证书时指定一个有效期间.一个有效时间间隔可用由单个时间组成,表面证书从现在开始有效并在那个时间到期;或由两个用冒号分隔指示明确的时间间隔</p>
</blockquote>
<p>-z serial_number:</p>
<blockquote>
<p>指定要嵌入证书中的序列号,以将此证书与同一CA中的其他证书区分开来.默认为0.当生成KRL时,-z标志用于指定KRL版本号</p>
</blockquote>
<p>17.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-L [-f input_keyfile]</span><br></pre></td></tr></table></figure>

<p>-L:</p>
<blockquote>
<p>打印一个或多个证书的内容</p>
</blockquote>
<p>18.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-A [-f prefix_path]</span><br></pre></td></tr></table></figure>

<p>-A:</p>
<blockquote>
<p>对于每个不存在主机密钥的密钥类型(rsa,dsa,ecdsa和ed25519),使用默认密钥文件路径,空密码,密码类型的默认位数和默认注释生成主机密钥.如果还指定-f,则其参数将用作生成规定主机密钥文件的默认路径的前缀.该项又/etc/rc用于产生新的主机密钥</p>
</blockquote>
<p>19.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-k -f krl_file [-u] [-s ca_public] [-z version_number] file ...</span><br></pre></td></tr></table></figure>

<p>-k:</p>
<blockquote>
<p>生成一个KRL文件.在该模式下,ssh-keygen将在通过-f标志指定的位置生成一个KRL文件,该文件撤销命令行中显示的每个密钥或证书.</p>
</blockquote>
<p>20.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen	-Q -f krl_file file ...</span><br></pre></td></tr></table></figure>

<p>-Q:</p>
<blockquote>
<p>测试密钥是否在KRL中被撤销.</p>
</blockquote>
<h4 id="模块生成"><a href="#模块生成" class="headerlink" title="模块生成"></a>模块生成</h4><p>ssh-keygen可用于为Diffie-Hellman组交换(DH-GEX)协议生成组.生成组的过程:先使用快速但内存密集的进程生成候选素数,然后对候选素数进行适应性测试(CPU密集型进程)</p>
<p>使用-G选项执行素数的生成,长度由-b选项指定</p>
<pre><code>#ssh-keygen -G moduli-2048.candidates -b 2048</code></pre><p>默认情况下,搜索素数从所需长度范围内的随机点开始.可使用-S选项覆盖,指定不同的起点</p>
<p>产生了一组候选素数后,开始筛选适合性.使用-T选项执行.从标准输入(或-f指定文件)读取候选项.</p>
<pre><code>#ssh-keygen -T modulic-2048 -f moduli-2048.candidates</code></pre><p>默认情况下,每个候选素数将受到100次素性测试.可使用-a选项覆盖.如果需要特定的生成器,可用使用-W选项,有效的生成器是2,3,5</p>
<h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>ssh-keygen支持签署密钥以生成可用用于用户或主机身份验证的证书.证书由公钥,身份信息,0或多个主体(用户或主机)名称以及证书颁发机构(CA)密钥签署的一组选项组成.然后,客户或服务器可用仅新人CA密钥并在证书上验证其签名.</p>
<p>ssh-keygen支持两种类型的证书:用户和主机.用户证书将用户认证到服务器,主机证书向用户认证服务器主机</p>
<h3 id="ssh-keyscan"><a href="#ssh-keyscan" class="headerlink" title="ssh-keyscan"></a>ssh-keyscan</h3><p>ssh-keyscan 收集SSH公钥</p>
<p>ssh-keyscan 是一个用于收集各个主机的SSH主机公钥的程序.功能是帮助构建和验证ssh_known_hosts文件,其格式记录在sshd中.提供了一个适用于shell和perl脚本的最小界面</p>
<p>ssh-keyscan使用非阻塞套接字I/O来并行连接尽可能多的主机,因此非常搞笑.即使某些主机关闭或不运行sshd,也可以在几十秒内收集1000个主机域中的密钥</p>
<h4 id="命令与参数"><a href="#命令与参数" class="headerlink" title="命令与参数"></a>命令与参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keyscan	[-46cDHv] [-f file] [-p port] [-T timeout] [-t type] [host | addrlist namelist]</span><br></pre></td></tr></table></figure>

<h4 id="参数解释-2"><a href="#参数解释-2" class="headerlink" title="参数解释"></a>参数解释</h4><p>-4</p>
<blockquote>
<p>强制ssh-keyscan 仅使用IPv4地址</p>
</blockquote>
<p>-6</p>
<blockquote>
<p>强制ssh-keyscan仅使用IPv6地址</p>
</blockquote>
<p>-c</p>
<blockquote>
<p>从目标主机请求证书而不是普通密钥</p>
</blockquote>
<p>-D</p>
<blockquote>
<p>打印以SSHFP DNS记录形式找到的密钥.默认将在ssh known_hosts文件可用格式下打印密钥</p>
</blockquote>
<p>-f file</p>
<blockquote>
<p>从file读取主机或”addrlist namelist”对.如果提供’-‘而不是文件名,ssh-keyscan将从标准输入中读取.<br>预期输入的格式为:</p>
<p>1.2.3.4,1.2.4.4 name.my.domain,name,n.my.domain,n,1.2.3.4,1.2.4.4</p>
</blockquote>
<p>-H</p>
<blockquote>
<p>在输出中hash所有主机名和地址.hash名称可在ssh和sshd中正常使用,且公开后不会透漏任何关键信息</p>
</blockquote>
<p>-p port</p>
<blockquote>
<p>连接到远程主机的端口</p>
</blockquote>
<p>-T timeout</p>
<blockquote>
<p>设置尝试连接的超时时间.默认5秒</p>
</blockquote>
<p>-t type</p>
<blockquote>
<p>指定要从扫描的主机获取的密钥的类型.可能的值为: “dsa”, “ecdsa”, “ed25519”, 或 “rsa”. 默认为”rsa”,”ecdsa”和”ed25519”</p>
</blockquote>
<p>-v</p>
<blockquote>
<p>详细模式:打印调试信息</p>
</blockquote>
<h3 id="ssh-keysign"><a href="#ssh-keysign" class="headerlink" title="ssh-keysign"></a>ssh-keysign</h3><p>ssh-keysign:用于基于主机的身份验证的ssh帮助程序</p>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>ssh使用ssh-keysign访问本地主机密钥,并生成在主机身份验证方式中需要的数字签名</p>
<p>ssh-keysign默认被禁用,只能通过在全局客户端配置文件/etc/ssh/ssh_config中配置选项EnableSSHKeysign为”yes”才会启用</p>
<p>ssh-keysign不会由用户调用,而是从ssh中调用</p>
<h3 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h3><p>ssh-agent 认证代理</p>
<p>ssh-agent 是一个保存用于公钥验证方式的私钥的程序.ssh-agent通常在X-session或登陆会话时启动,其他窗口或程序都作为ssh-agent的客户端启动.通过使用环境变量,代理可以被定为并在ssh登陆到其他机器时自动认证</p>
<p>ssh-agent最初没有任何私钥.使用ssh或ssh-add添加密钥.多个身份可用同时存储在ssh-agent中,且ssh会自动使用存在的身份.ssh-add也可以从ssh-agnet中移除密钥并查询保存在其中的密钥</p>
<h4 id="命令与参数-1"><a href="#命令与参数-1" class="headerlink" title="命令与参数"></a>命令与参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-agent	[-c | -s] [-Dd] [-a bind_address] [-E fingerprint_hash] [-P pkcs11_whitelist] [-t life] [command [arg ...]]</span><br><span class="line"></span><br><span class="line">ssh-agent	[-c | -s] -k</span><br></pre></td></tr></table></figure>

<h4 id="参数解释-3"><a href="#参数解释-3" class="headerlink" title="参数解释"></a>参数解释</h4><p>-a bind_address</p>
<blockquote>
<p>将代理绑定到UNIX域套接字bind_address.默认值为$TMPDIR/XXXXXXXXXX/agent.<ppid></ppid></p>
</blockquote>
<p>-c</p>
<blockquote>
<p>在标准输出stdout上生成C-shell命令.如果shell看起来是csh风格的,这是默认项</p>
</blockquote>
<p>-D</p>
<blockquote>
<p>前景模式.在该选项被指定时,ssh-agent不会分叉</p>
</blockquote>
<p>-d</p>
<blockquote>
<p>调试模式.在该选项被指定时,ssh-agent不会分叉,并将调试信息写入标准错误stderr</p>
</blockquote>
<p>-E fingerprint_hash</p>
<blockquote>
<p>指定打印密钥指纹时的散列算法.有效选项是:”md5”和”sha256”.默认值是”sha256”</p>
</blockquote>
<p>-k</p>
<blockquote>
<p>杀掉当前代理(由SSH_AGENT_PID环境变量给出)</p>
</blockquote>
<p>-P pkcs11_whitelist</p>
<blockquote>
<p>为可用使用-s选项添加到ssh-add的PKCS#11共享库指定可接受路径的模式列表.默认允许从“/usr/lib/*,/usr/local/lib/*”加载PKCS#11库.与白名单不匹配的PKCS#11库将被拒绝</p>
</blockquote>
<p>-s</p>
<blockquote>
<p>在标准输出stdout中生成Bourne shell命令.如果shell看起来不是csh风格的代码,则该项为默认项</p>
</blockquote>
<p>-t life</p>
<blockquote>
<p>为添加到代理的身份设定默认的最长生存周期.以秒或ssh_config中指定的时间格式为单位</p>
</blockquote>
]]></content>
      <categories>
        <category>协议</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>libssh</title>
    <url>/2019/06/19/libssh/</url>
    <content><![CDATA[<h1 id="libssh库简介"><a href="#libssh库简介" class="headerlink" title="libssh库简介"></a>libssh库简介</h1><p>今天依旧是一篇旧文，还是ssh相关。ssh相关的开发大多是基于libssh库。本文关于libssh库的介绍，基本上也是对文档的翻译，时隔较旧，如有纰漏欢迎指正。</p>
<a id="more"></a>

<h2 id="Chapter-1-SSH会话示例"><a href="#Chapter-1-SSH会话示例" class="headerlink" title="Chapter 1:SSH会话示例"></a>Chapter 1:SSH会话示例</h2><h3 id="创建会话并设置选项"><a href="#创建会话并设置选项" class="headerlink" title="创建会话并设置选项"></a>创建会话并设置选项</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/libssh.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_session my_ssh_session = ssh_new();</span><br><span class="line">	<span class="keyword">if</span> (my_ssh_session == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	</span><br><span class="line">	ssh_free(my_ssh_session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-new"><a href="#ssh-new" class="headerlink" title="ssh_new()"></a>ssh_new()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ssh_session <span class="title">ssh_new</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>返回一个ssh_session指针，错误时返回NULL</p>
<p>引用ssh_buffer_new()和ssh_set_blocking()</p>
<h4 id="ssh-buffer-new"><a href="#ssh-buffer-new" class="headerlink" title="ssh_buffer_new()"></a>ssh_buffer_new()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct ssh_buffer_struct * <span class="title">ssh_buffer_new</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>创建一个新的SSH缓冲区</p>
<p>返回新初始化的SSH缓冲区，错误时为NULL</p>
<h4 id="ssh-set-blocking"><a href="#ssh-set-blocking" class="headerlink" title="ssh_set_blocking()"></a>ssh_set_blocking()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_set_blocking</span> <span class="params">(ssh_session session,<span class="keyword">int</span> blocking)</span></span></span><br></pre></td></tr></table></figure>

<p>将会话设置为阻塞/非阻塞模式</p>
<p>blocking 参数 0 设置为非阻塞模式</p>
<h4 id="ssh-free"><a href="#ssh-free" class="headerlink" title="ssh_free()"></a>ssh_free()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_free</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>释放已分配的SSH会话句柄</p>
<p>libssh遵循allocate-it-deallocate-it模式，使用ssh_new()分配，必须使用ssh_free()进行取消分配</p>
<h4 id="ssh-options-set"><a href="#ssh-options-set" class="headerlink" title="ssh_options_set()"></a>ssh_options_set()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_options_set</span><span class="params">(ssh_session session, <span class="keyword">enum</span> ssh_optinons_e type, <span class="keyword">const</span> <span class="keyword">void</span>* value)</span></span></span><br></pre></td></tr></table></figure>

<p>设置会话的选项</p>
<p>type：要设置的选项类型，常用的选项：</p>
<ul>
<li>SSH_OPTIONS_HOST:连接到的主机名或IP地址(const char*)</li>
<li>SSH_OPTIONS_PORT:连接到的端口(unsigned int)</li>
<li>SSH_OPTIONS_USER:想要连接的系统用户(const char*)</li>
<li>SSH_OPTIONS_LOG_VERBOSITY:打印的消息数量(int)</li>
</ul>
<p>其中SSH_OPTIONS_HOST是唯一的强制选项；端口号默认22；不使用SSH_OPTIONS_USER,则会使用当前账户的本地账用户名</p>
<h3 id="连接到服务器"><a href="#连接到服务器" class="headerlink" title="连接到服务器"></a>连接到服务器</h3><p>完成设置后。可使用ssh_connect()进行连接。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/libssh.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_session my_ssh_session;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	my_ssh_session = ssh_new();</span><br><span class="line">	<span class="keyword">if</span> (my_ssh_session == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">	ssh_options_set(my_ssh_session,SSH_OPTIONS_HOST,<span class="string">"localhost"</span>)；</span><br><span class="line">	</span><br><span class="line">	rc = ssh_connect(my_ssh_session);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"连接到本地主机错误：%s\n"</span>,ssh_get_error(my_ssh_session));</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_disconnect(my_ssh_session);</span><br><span class="line">	ssh_free(my_ssh_session);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-connect"><a href="#ssh-connect" class="headerlink" title="ssh_connect()"></a>ssh_connect()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_connect</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>连接到ssh服务器</p>
<p>成功时返回SSH_OK，错误时返回SSH_ERROR。若会话处于无阻塞模式，且必须要重连，返回SSH_AGAIN</p>
<h4 id="ssh-get-error"><a href="#ssh-get-error" class="headerlink" title="ssh_get_error()"></a>ssh_get_error()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">ssh_get_error</span><span class="params">(<span class="keyword">void</span>* error)</span></span></span><br></pre></td></tr></table></figure>

<p>error ssh_session 或者 ssh_bind</p>
<p>返回描述错误的static字符串</p>
<h4 id="ssh-disconnect"><a href="#ssh-disconnect" class="headerlink" title="ssh_disconnect()"></a>ssh_disconnect()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_disconnect</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>从一个会话断开连接（服务器或客户端）；该会话之后可以在新的会话中重新开始使用。</p>
<p>与ssh_connect()组合使用</p>
<h3 id="验证服务器"><a href="#验证服务器" class="headerlink" title="验证服务器"></a>验证服务器</h3><p>连接完成后，必须检查刚刚连接的服务器是否一致且安全可用，有两种方式实现：</p>
<ol>
<li><strong>（推荐）</strong>使用ssh_is_server_known()函数。该函数将查看已知的主机文件(UNIX中的~/.ssh/known_hosts)，查找服务器主机名的模式，并确认该主机是否存在列表中</li>
<li>使用ssh_get_pubkey_hash()函数。使用该函数获取二进制版本的公钥hash值，通过本地数据库检查此公钥是否已知且安全</li>
</ol>
<h4 id="ssh-is-server-known"><a href="#ssh-is-server-known" class="headerlink" title="ssh_is_server_known()"></a>ssh_is_server_known()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_is_server_known</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>返回一个状态码</p>
<h4 id="ssh-get-pubkey-hash"><a href="#ssh-get-pubkey-hash" class="headerlink" title="ssh_get_pubkey_hash()"></a>ssh_get_pubkey_hash()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_get_pubkey_hash</span><span class="params">(ssh_session session, <span class="keyword">unsigned</span> <span class="keyword">char</span>** hash)</span></span></span><br></pre></td></tr></table></figure>

<p>推荐使用ssh_get_publickey_hash()</p>
<p>如果时第一次使用远程主机，可以询问用户是否信任主机。如认为主机是有效的并且值得添加到已知主机文件中，可以使用ssh_write_knownhost()将其注册到已知主机文件中，或使用自己的数据库。</p>
<h4 id="ssh-write-knownhost"><a href="#ssh-write-knownhost" class="headerlink" title="ssh_write_knownhost()"></a>ssh_write_knownhost()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_write_knownhost</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>写入成功返回SSH_OK,失败则返回SSH_ERROR</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">verify_knownhost</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> state,hlen;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> *hash = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span> *hexa;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	state = ssh_is_server_known(session);<span class="comment">//是否识别远程主机</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取远程主机的公钥hash</span></span><br><span class="line">	hlen = ssh_get_pubkey_hash(session,&amp;hash);</span><br><span class="line">	<span class="keyword">if</span> (hlen&lt;<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据状态返回报错信息或进行下一步</span></span><br><span class="line">	<span class="keyword">switch</span>(state)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_KNOWN_OK:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_KNOWN_CHANGED:</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Host key for server changed:it is now:\n"</span>)；</span><br><span class="line">			ssh_print_hexa（<span class="string">"Public key hash"</span>,hash,hlen);</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"For security reasons, connection will be stopped\n"</span>);</span><br><span class="line">			<span class="built_in">free</span>(hash);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_FOUND_OTHER:</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The host key for this server was not found but an other type of key exists.\n"</span>);</span><br><span class="line">  		    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"An attacker might change the default server key to confuse your client into thinking the key does not exist\n"</span>);</span><br><span class="line">            <span class="built_in">free</span>(hash);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_FILE_NOT_FOUND:</span><br><span class="line">  			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not find known host file.\n"</span>);</span><br><span class="line">  			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"If you accept the host key here, the file will be automatically created.\n"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_NOT_KNOWN:</span><br><span class="line">  			hexa = ssh_get_hexa(hash, hlen);</span><br><span class="line">  			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"The server is unknown. Do you trust the host key?\n"</span>);</span><br><span class="line">  			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Public key hash: %s\n"</span>, hexa);</span><br><span class="line">  			<span class="built_in">free</span>(hexa);</span><br><span class="line">  			<span class="keyword">if</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>) == <span class="literal">NULL</span>)</span><br><span class="line">  			&#123;</span><br><span class="line">    			<span class="built_in">free</span>(hash);</span><br><span class="line">    			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  			&#125;</span><br><span class="line">  			<span class="keyword">if</span> (strncasecmp(buf, <span class="string">"yes"</span>, <span class="number">3</span>) != <span class="number">0</span>)</span><br><span class="line">  			&#123;</span><br><span class="line">	        <span class="built_in">free</span>(hash);</span><br><span class="line">	        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	      	&#125;</span><br><span class="line">	      	<span class="keyword">if</span> (ssh_write_knownhost(session) &lt; <span class="number">0</span>)</span><br><span class="line">	      	&#123;</span><br><span class="line">	        	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error %s\n"</span>, strerror(errno));</span><br><span class="line">	        	<span class="built_in">free</span>(hash);</span><br><span class="line">	        	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	      	&#125;</span><br><span class="line">	      	<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> SSH_SERVER_ERROR:</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error %s\n"</span>,ssh_get_error?(session));</span><br><span class="line">			<span class="built_in">free</span>(hash);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(hash);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-get-error-code"><a href="#ssh-get-error-code" class="headerlink" title="ssh_get_error_code()"></a>ssh_get_error_code()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_get_error_code</span><span class="params">(<span class="keyword">void</span>* error)</span></span></span><br></pre></td></tr></table></figure>

<p>用于接受最后一个错误的错误代码</p>
<p>返回一个错误代码，对应不同错误状态</p>
<h3 id="验证用户"><a href="#验证用户" class="headerlink" title="验证用户"></a>验证用户</h3><p>在用户验证服务器是安全可用的远程主机后，下一步是服务器授权用户，使已认证的用户能够访问资源。</p>
<p>libssh支持的认证方法：</p>
<ul>
<li>无认证</li>
<li>密码方法</li>
<li>键盘交互方式：服务器向用户发出几个挑战，用户必须正确回答问题。志告方式使通过密码本验证成为可能</li>
<li>公钥方法</li>
</ul>
<p>这些认证方式可以结合使用。</p>
<p>一个使用密码进行身份验证的实例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/libssh.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_session my_ssh_session;</span><br><span class="line">	<span class="keyword">int</span>* rc;</span><br><span class="line">	<span class="keyword">char</span>* password;</span><br><span class="line"></span><br><span class="line">	my_ssh_session = ssh_new();</span><br><span class="line">	<span class="keyword">if</span> (my_ssh_session == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	ssh_options_set(my_ssh_session,SSH_OPTIONS_HOST,<span class="string">"localhost"</span>);</span><br><span class="line"></span><br><span class="line">	rc = ssh_connect(my_ssh_session);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error connecting to localhost:%s\n"</span>,ssh_get_error(my_ssh_session));</span><br><span class="line">		ssh_free(my_ssh_session);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (verify_knowhost(my_ssh_session)&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_disconnect(my_ssh_session);</span><br><span class="line">		ssh_free(my_ssh_session);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	password = getpass(<span class="string">"Password:"</span>);</span><br><span class="line">	rc = ssh_userauth_password(my_ssh_session,<span class="literal">NULL</span>,password);</span><br><span class="line">	<span class="keyword">if</span>(rc!=SSH_AUTH_SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error authenticating with password:%s\n"</span>,ssh_get_error(my_ssh_session));</span><br><span class="line">		ssh_disconnect(my_ssh_session);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  ssh_disconnect(my_ssh_session);</span><br><span class="line">	ssh_free(my_ssh_connect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>在双方进行验证后，下一步可以利用SSH协议进行操作，执行远程命令，开启远程终端，交换文件，转发端口；等等。</p>
<p>执行远程命令的示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show_remote_processes</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_channel channel'</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">int</span> nbytes;</span><br><span class="line">	</span><br><span class="line">	channel = ssh_channel_new(session);</span><br><span class="line">	<span class="keyword">if</span> (channel == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	</span><br><span class="line">	rc = ssh_channel_open_session(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_close(channel);</span><br><span class="line">		ssh_channel_free(channel);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	nbytes = ssh_channel_read(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(nbytes &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (write(<span class="number">1</span>,buffer,nbytes)!= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes)</span><br><span class="line">		&#123;</span><br><span class="line">			ssh_channel_close(channel);</span><br><span class="line">			ssh_channel_free(channel);</span><br><span class="line">			<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">		nbytes = ssh_channel_read(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(nbytes &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_close(channel);</span><br><span class="line">		ssh_channel_free(channel);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_channel_send_eof(channel);</span><br><span class="line">	ssh_channel_close(channel);</span><br><span class="line">	ssh_channel_free(channel);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Chapter-2-用户验证相关"><a href="#Chapter-2-用户验证相关" class="headerlink" title="Chapter 2:用户验证相关"></a>Chapter 2:用户验证相关</h2><p>公钥，密码，挑战应答模式（键盘交互），无验证</p>
<h3 id="公钥验证方法"><a href="#公钥验证方法" class="headerlink" title="公钥验证方法"></a>公钥验证方法</h3><p>libssh与openssh公钥和私钥完全兼容，可以使用libssh提供的自动公钥验证方法，也可以使用公钥函数进行自定义。</p>
<h4 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a>验证流程</h4><ol>
<li>扫描本地包含公钥的文件列表，每个密钥都发送到SSH服务器，直到服务器确认一个密钥（服务器已知的可以认证用户的密钥）。</li>
<li>检索此密钥的私钥并发送证明自己知道该私钥的消息。</li>
</ol>
<p>使用ssh_userauth_publickey_auto()函数进行验证</p>
<h4 id="ssh-userauth-publickey-auto"><a href="#ssh-userauth-publickey-auto" class="headerlink" title="ssh_userauth_publickey_auto()"></a>ssh_userauth_publickey_auto()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_publickey_auto</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username,<span class="keyword">const</span> <span class="keyword">char</span>* passphrase)</span></span></span><br></pre></td></tr></table></figure>

<p>尝试自动使用公钥或无验证方式进行验证</p>
<p>参数：</p>
<ul>
<li>session SSH会话</li>
<li>username 用户名，应该为NULL</li>
<li>passphrase 密码，用于解锁私钥，如果不使用密码或需要询问用户时用NULL</li>
</ul>
<p>返回值：</p>
<ul>
<li>SSH_AUTH_ERROR:发生严重错误</li>
<li>SSH_AUTH_DENIED:服务器不接受该公钥验证，尝试另一个公钥或其他方法</li>
<li>SSH_AUTH_PARTIAL:已经被部分认证（多验证方式存在），仍需要其他验证方法</li>
<li>SSH_AUTH_SUCCESS:公钥通过验证，可以使用ssh_userauth_publickey()</li>
<li>SSH_AUTH_AGAIN:非阻塞模式下，须稍后再重新调用</li>
</ul>
<h4 id="ssh-userauth-publickey"><a href="#ssh-userauth-publickey" class="headerlink" title="ssh_userauth_publickey()"></a>ssh_userauth_publickey()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_publickey</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username,<span class="keyword">const</span> ssh_key privkey)</span></span></span><br></pre></td></tr></table></figure>

<p>使用公钥/私钥或证书进行验证，与用户的私钥进行身份验证匹配</p>
<p>大多数服务器实现不允许在认证过程中更改用户名，只有在连接到服务器之前才应该使用ssh_options_set()来设置用户名，username参数应该设置为NULL</p>
<h4 id="使用自己的公钥进行身份验证"><a href="#使用自己的公钥进行身份验证" class="headerlink" title="使用自己的公钥进行身份验证"></a>使用自己的公钥进行身份验证</h4><p>步骤：</p>
<ul>
<li>使用ssh_pki_import_pobkey_file()检索公钥</li>
<li>使用ssh_userauth_try_publickey()将公钥提供给SSH服务器。如果返回值为SSH_AUTH_SUCCESS，则SSH服务器接受使用公钥进行身份验证，则进行下一步</li>
<li>使用ssh_userauth_publickey()与私钥进行身份验证</li>
<li>最后使用ssh_key_free()清理内存</li>
</ul>
<h4 id="ssh-pki-import-pubkey-file"><a href="#ssh-pki-import-pubkey-file" class="headerlink" title="ssh_pki_import_pubkey_file()"></a>ssh_pki_import_pubkey_file()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_pki_import_pubkey_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename,ssh_key* pkey)</span></span></span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li>filename 公钥文件的地址</li>
<li>pkey 存储公钥分配的指针，需要使用ssh_key_free()释放内存</li>
</ul>
<p>返回值：</p>
<p>成功时返回SSH_OK；文件不存在或者权限被拒绝返回SSH_EOF；其他返回SSH_ERROR</p>
<h4 id="ssh-userauth-try-publickey"><a href="#ssh-userauth-try-publickey" class="headerlink" title="ssh_userauth_try_publickey()"></a>ssh_userauth_try_publickey()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_try_publickey</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username,<span class="keyword">const</span> ssh_key pubkey)</span></span></span><br></pre></td></tr></table></figure>

<p>尝试使用给定的公钥进行身份验证</p>
<h4 id="ssh-pki-import-privkey-file"><a href="#ssh-pki-import-privkey-file" class="headerlink" title="ssh_pki_import_privkey_file()"></a>ssh_pki_import_privkey_file()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_pki_import_privkey_file</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename,<span class="keyword">const</span> <span class="keyword">char</span>* passphrase,ssh_auth_callback auth_fn,<span class="keyword">void</span>* auth_data,ssh_key* pkey)</span></span></span><br></pre></td></tr></table></figure>

<p>从文件中个导入密钥</p>
<p>参数：</p>
<ul>
<li>filename:私钥名称</li>
<li>passphrase:私钥的解密密钥。未加密或未知设为NULL</li>
<li>auth_fn:希望使用的验证函数或为NULL</li>
<li>auth_data:传递给验证函数的私有数据</li>
<li>Pkey:分配给存储ssh_key的指针，需要使用ssh_key_free()释放</li>
</ul>
<p>返回值：</p>
<p>成功时返回SSH_OK；文件不存在或者权限被拒绝返回SSH_EOF；其他返回SSH_ERROR</p>
<h4 id="ssh-key-free"><a href="#ssh-key-free" class="headerlink" title="ssh_key_free()"></a>ssh_key_free()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_key_free</span><span class="params">(ssh_key key)</span></span></span><br></pre></td></tr></table></figure>

<p>释放一个SSH key</p>
<h4 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">authenticate_pubkey</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	</span><br><span class="line">	rc = ssh_userauth_publickey_auto(session <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (rc = SSH_AUTH_ERROR)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Authentication failed: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_AUTH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="密码验证"><a href="#密码验证" class="headerlink" title="密码验证"></a>密码验证</h3><p>使用ssh_userauth_password()进行密码身份验证。若密码通过验证，返回SSH_AUTH_SUCCESS。需要询问密码并进行安全分配管理。</p>
<p>如果服务器反馈密码错误，但仍可以使用openssh的客户端进行身份验证，可能是因为openssh只接受键盘交互形式的验证。切换到键盘交互模式，或尝试在SSH服务器上配置纯文本密码。</p>
<h4 id="ssh-userauth-password"><a href="#ssh-userauth-password" class="headerlink" title="ssh_userauth_password()"></a>ssh_userauth_password()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_password</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username,<span class="keyword">const</span> <span class="keyword">char</span>* password)</span></span></span><br></pre></td></tr></table></figure>

<p>尝试使用密码进行验证；该方法通常在SSHv2服务器上被禁止，应当使用键盘交互模式进行验证。</p>
<p>password值必须用UTF-8进行编码，如何与解释密码，并与密码数据库进行验证由服务器决定。</p>
<h3 id="键盘交互认证方法"><a href="#键盘交互认证方法" class="headerlink" title="键盘交互认证方法"></a>键盘交互认证方法</h3><p>服务器提出challenge，一个或多个用户必须回答的问题，直到服务器接受认证</p>
<h4 id="ssh-userauth-kbdint"><a href="#ssh-userauth-kbdint" class="headerlink" title="ssh_userauth_kbdint()"></a>ssh_userauth_kbdint()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_kbdint</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* user,<span class="keyword">const</span> <span class="keyword">char</span>* submethods)</span></span></span><br></pre></td></tr></table></figure>

<p>尝试通过键盘交互模式进行验证。</p>
<p>参数：</p>
<ul>
<li>session：将要使用的ssh会话</li>
<li>user：需要验证的用户名，定义为NULL，有ssh_option_set_username()修改用户名，中途不能修改</li>
<li>submethods：设定为NULL</li>
</ul>
<p>返回：</p>
<ul>
<li>SSH_AUTH_ERROR:发生严重错误</li>
<li>SSH_AUTH_DENIED:认证失败：使用另一种方法</li>
<li>SSH_AUTH_PARTIAL:部分认证成功，仍需要其他方法的认证</li>
<li>SSH_AUTH_SUCCESS:认证成功</li>
<li>SSH_AUTH_INFO:服务器询问了一些问题，使用ssh_userauth_kbdint_getnprompts()</li>
<li>SSH_AUTH_AGAIN:在无阻塞模式中，需要之后再重新访问</li>
</ul>
<h4 id="ssh-userauth-kbdint-getnprompts"><a href="#ssh-userauth-kbdint-getnprompts" class="headerlink" title="ssh_userauth_kbdint_getnprompts()"></a>ssh_userauth_kbdint_getnprompts()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_kbdint_getprompts</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>获取服务器提供的提示(问题)数量</p>
<p>返回： 提示的数量</p>
<h4 id="ssh-userauth-kbdint-getname"><a href="#ssh-userauth-kbdint-getname" class="headerlink" title="ssh_userauth_kbdint_getname()"></a>ssh_userauth_kbdint_getname()</h4><p>定义：</p>
<pre><code>const char* ssh_userauth_kbdint_getname(ssh_session session)</code></pre><p>获得消息块的名称。调用ssh_userauth_kbdint()并收到了SSH_AUTH_INFO返回码，调用该函数检索远程主机发送的键盘交互认证问题的信息。</p>
<p>返回：消息快的名称，不要释放该指针</p>
<h4 id="ssh-userauth-kbdint-getinstruction"><a href="#ssh-userauth-kbdint-getinstruction" class="headerlink" title="ssh_userauth_kbdint_getinstruction()"></a>ssh_userauth_kbdint_getinstruction()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">ssh_userauth_kbdint_getinstruction</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>获取消息块的指令</p>
<p>返回：消息块的指令</p>
<h4 id="ssh-userauth-kbdint-getprompt"><a href="#ssh-userauth-kbdint-getprompt" class="headerlink" title="ssh_userauth_kbdint_getprompt()"></a>ssh_userauth_kbdint_getprompt()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">ssh_userauth_kbdint_getprompt</span><span class="params">(ssh_session session,<span class="keyword">unsigned</span> <span class="keyword">int</span> i,<span class="keyword">char</span>* echo)</span></span></span><br></pre></td></tr></table></figure>

<p>从消息块获取提示</p>
<p>参数：</p>
<ul>
<li>session 使用的ssh会话</li>
<li>i 当前提示的索引</li>
<li>echo 可选项，获取一个布尔值，用于设定用户输入应该被回显或隐藏，密码通常设定为隐藏</li>
</ul>
<p>返回：指向提示符的指针，不要释放该指针</p>
<h4 id="ssh-user-kbdint-setanswer"><a href="#ssh-user-kbdint-setanswer" class="headerlink" title="ssh_user_kbdint_setanswer()"></a>ssh_user_kbdint_setanswer()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_kbdint_setanswer</span><span class="params">(ssh_session session,<span class="keyword">unsigned</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">char</span>* answer)</span></span></span><br></pre></td></tr></table></figure>

<p>回复来自消息块的问题的答案</p>
<p>参数：</p>
<ul>
<li>session 当前会话</li>
<li>i 当前提示的索引编号</li>
<li>answer 给服务器的答案，必须为UTF-8格式的编码。如何解释并使用该值进行验证取决于服务器，但如果使用其他格式编码答案，则必须先转换为UTF-8</li>
</ul>
<p>返回：成功时返回0，错误时返回值&lt;0</p>
<h4 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h4><ol>
<li>调用ssh_userauth_kbdint()函数并存储答案</li>
<li>如果收到的返回是SSH_AUTH_INFO，则说明服务器发送了几个问题，询问用户，使用ssh_userauth_kbdint_getnprompts(),ssh_userauth_kbdint_getname(),ssh_userauth_kbdint_getinstruction()和ssh_userauth_kbdint_getprompt()检索问题</li>
<li>使用ssh_userauth_kbdint_setanswer()为挑战中的每个问题设置答案</li>
<li>再次调用ssh_userauth_kbdint()，直到这些函数返回的内容不是SSH_AUTH_INFO</li>
</ol>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为当前会话进行键盘交互方式的认证</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">authenticate_kbdint</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;<span class="comment">//状态码</span></span><br><span class="line">	</span><br><span class="line">	rc  = ssh_userauth_kbdint(session,<span class="literal">NULL</span>,<span class="literal">NULL</span>)</span><br><span class="line">	<span class="keyword">while</span>(rc == SSH_AUTH_INFO)<span class="comment">//调用直到返回值不是SSH_AUTH_INFO</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">char</span> *name,*instruction;</span><br><span class="line">		<span class="keyword">int</span> nprompts,iprompt;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//检索问题，获取问题的名称，指令，提示</span></span><br><span class="line">		name = ssh_userauth_kbdint_getname(session);</span><br><span class="line">		instruction = ssh_userauth_kbdint_getinstruction(session);</span><br><span class="line">		nprompts = ssh_userauth_kbdint_getnprompts(session);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(name)&gt;<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,name);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(instruction)&gt;<span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,instruction);</span><br><span class="line">		<span class="keyword">for</span> (iprompt = <span class="number">0</span>;iprompt &lt; nmprompts;iprompt++)<span class="comment">//循环获取所有的提示，并获取用户的答案</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">const</span> <span class="keyword">char</span> *prompt;</span><br><span class="line">			<span class="keyword">char</span> echo;</span><br><span class="line">		</span><br><span class="line">			prompt = ssh_userauth_kbdint_getprompt(session,iprompt,&amp;echo);<span class="comment">//检索提示，将内容赋给prompt</span></span><br><span class="line">			<span class="keyword">if</span> (echo)<span class="comment">//如果设定为真，显示用户回显</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">char</span> buffer[<span class="number">128</span>], *ptr;</span><br><span class="line"></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%s"</span>,prompt);</span><br><span class="line">				<span class="keyword">if</span> (fgets(buffer,<span class="keyword">sizeof</span>(buffer),<span class="built_in">stdin</span>)==<span class="literal">NULL</span>)<span class="comment">//用户未能回答问题，则验证失败</span></span><br><span class="line">					<span class="keyword">return</span> SSH_AUTH_ERROR;</span><br><span class="line">				buffer[<span class="keyword">sizeof</span>(buffer)<span class="number">-1</span>] = <span class="string">'\0'</span>;<span class="comment">//将缓存中的最后一位置为标志'\0'</span></span><br><span class="line">				<span class="keyword">if</span> ((ptr = <span class="built_in">strchr</span>(buffer,<span class="string">'\n'</span>))!=<span class="literal">NULL</span>)</span><br><span class="line">					*ptr = <span class="string">'\0'</span>;</span><br><span class="line">				<span class="keyword">if</span> (ssh_userauth_kbdint_setanswer(session,ipromot,buffer)&lt;<span class="number">0</span>)<span class="comment">//如果服务器验证未通过，返回失败</span></span><br><span class="line">					<span class="keyword">return</span> SSH_AUTH_ERROR;</span><br><span class="line">				<span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in">strlen</span>(buffer));<span class="comment">//将缓存区置空</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span><span class="comment">//设定为隐藏模式，以密码形式读取</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">char</span> *ptr;</span><br><span class="line"></span><br><span class="line">				ptr = getpass(prompt);</span><br><span class="line">				<span class="keyword">if</span> (ssh_userauth_kbdint_setanswer(session,iprompt,ptr)&lt;<span class="number">0</span>)</span><br><span class="line">					<span class="keyword">return</span> SSH_AUTH_ERROR;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		rc = ssh_userauth_kbdint(session,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用“无验证”模式"><a href="#使用“无验证”模式" class="headerlink" title="使用“无验证”模式"></a>使用“无验证”模式</h3><p>无验证模式主要目的是在没有任何凭证的情况下进行认证（除非确实要授权匿名访问权限，不要使用该方式）。</p>
<p>如果该账号没有密码，且服务器配置为允许通过，则ssh_userauth_none()可能回复SSH_AUTH_SUCCESS</p>
<h4 id="ssh-userauth-none"><a href="#ssh-userauth-none" class="headerlink" title="ssh_userauth_none()"></a>ssh_userauth_none()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_none</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">authenticate_kbdint</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	</span><br><span class="line">	rc = ssh_userauth_none(session,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取支持的身份验证列表"><a href="#获取支持的身份验证列表" class="headerlink" title="获取支持的身份验证列表"></a>获取支持的身份验证列表</h3><p>如果不选择指定某种验证方法，可以让服务器展示可以是使用的验证方法</p>
<p>使用ssh_userauth_list()函数获取可用的身份验证方法以及如何使用</p>
<h4 id="ssh-userauth-list"><a href="#ssh-userauth-list" class="headerlink" title="ssh_userauth_list()"></a>ssh_userauth_list()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_userauth_list</span><span class="params">(ssh_session session,<span class="keyword">const</span> <span class="keyword">char</span>* username)</span></span></span><br></pre></td></tr></table></figure>

<p>获取服务器可使用的验证方法，调用该函数前需要调用ssh_userauth_none()</p>
<p>返回：</p>
<ul>
<li>SSH_AUTH_METHOD_PASSWORD</li>
<li>SSH_AUTH_METHOD_PUBLICKEY</li>
<li>SSH_AUTH_METHOD_HOSTBASED</li>
<li>SSH_AUTH_METHOD_INTERACTIVE</li>
</ul>
<h3 id="获取横幅"><a href="#获取横幅" class="headerlink" title="获取横幅"></a>获取横幅</h3><p>SSH服务器可能会发送一个横幅，一般为免责声明等内容用，使用ssh_get_issue_banner()检索横幅，显示给用户</p>
<h4 id="ssh-get-issue-banner"><a href="#ssh-get-issue-banner" class="headerlink" title="ssh_get_issue_banner()"></a>ssh_get_issue_banner()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">ssh_get_issue_banner</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>返回分配给横幅的字符串指针，出错时返回NULL</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">display_banner</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">char</span> *banner;</span><br><span class="line"></span><br><span class="line">	rc = ssh_userauth_none(session,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (rc = SSH_AUTH_ERROR)</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	banner = ssh_get_issue_banner(session);</span><br><span class="line">	<span class="keyword">if</span> (banner)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,banner);</span><br><span class="line">		<span class="built_in">free</span>(banner);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Chapter-3-开启远程终端"><a href="#Chapter-3-开启远程终端" class="headerlink" title="Chapter 3:开启远程终端"></a>Chapter 3:开启远程终端</h2><p>一个SSH连接可以有多个信道共享。一个信道可以用于多种用途。可以创建信道，用于开启远程终端，在远程计算机上启动命令解释程序。</p>
<h3 id="打开和关闭信道"><a href="#打开和关闭信道" class="headerlink" title="打开和关闭信道"></a>打开和关闭信道</h3><p>使用ssh_channel_new()函数创建一个信道，创建好之后，使用ssh_channel_open_session()打开一个SSH会话。不需要该信道时，使用ssh_channel_close()发送文件结束符(eof)，此时可以通过ssh_channel_free()销毁信道</p>
<h4 id="ssh-channel-new"><a href="#ssh-channel-new" class="headerlink" title="ssh_channel_new()"></a>ssh_channel_new()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ssh_channel <span class="title">ssh_channel_new</span><span class="params">(ssh_session session)</span></span></span><br></pre></td></tr></table></figure>

<p>分配一个新的信道</p>
<p>返回：指向新分配的信道的指针，错误时返回NULL</p>
<h4 id="ssh-channel-open-session"><a href="#ssh-channel-open-session" class="headerlink" title="ssh_channel_open_session()"></a>ssh_channel_open_session()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_open_session</span><span class="params">(ssh_channel channel)</span></span></span><br></pre></td></tr></table></figure>

<p>参数：channel：分配好的信道</p>
<p>返回：</p>
<ul>
<li>SSH_OK 成功时返回</li>
<li>SSH_ERROR 错误时返回</li>
<li>SSH_AGAIN 无阻塞模式下，需要等待重新调用</li>
</ul>
<h4 id="ssh-channel-close"><a href="#ssh-channel-close" class="headerlink" title="ssh_channel_close()"></a>ssh_channel_close()</h4><p>关闭一个信道，发送文件结束符(EOF)并关闭信道。关闭后无法恢复无法去要发送或处于缓冲区中的数据</p>
<p>返回：成功返回SSH_OK，失败返回SSH_ERROR</p>
<h4 id="ssh-channel-free"><a href="#ssh-channel-free" class="headerlink" title="ssh_channel_free()"></a>ssh_channel_free()</h4><p>关闭并释放一个信道</p>
<p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_channel_free</span><span class="params">(ssh_channel channel)</span></span></span><br></pre></td></tr></table></figure>

<p>调用函数后该信道上的所有数据均会丢失</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shell_session</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_channel channel;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	</span><br><span class="line">	channel = ssh_channel_new(session);</span><br><span class="line">	<span class="keyword">if</span> (channel == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">  </span><br><span class="line">	rc = ssh_channel_open_session(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_free(channel);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line">  		</span><br><span class="line">	ssh_channel_close(channel);</span><br><span class="line">	ssh_channel_send_eof(channel);</span><br><span class="line">	ssh_channel_free(channel);</span><br><span class="line">  		</span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交互会话与非交互会话"><a href="#交互会话与非交互会话" class="headerlink" title="交互会话与非交互会话"></a>交互会话与非交互会话</h3><p>如果需要一个接一个地键入命令，则认为是交互模式的；如果没有附加终端，类似于后台执行命令，是为为交互式的shell.</p>
<p>如果使用交互式shell。需要在远程终端创建一个伪终端，通过ssh_channel_request_pty()请求pty，然后用ssh_channel_change_pty_size()定义其维度(行数和列数）</p>
<p>无论使用交互会话还是非交互会话，都需要使用ssh_channel_request_shell()请求一个shell</p>
<h4 id="ssh-channel-request-pty"><a href="#ssh-channel-request-pty" class="headerlink" title="ssh_channel_request_pty()"></a>ssh_channel_request_pty()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_request_pty</span><span class="params">(ssh_channel channel)</span></span></span><br></pre></td></tr></table></figure>

<p>请求一个伪终端PTY</p>
<p>返回：成功时返回SSH_OK，失败时返回SSH_ERROR,在非阻塞模式下如果需要重新调用返回SSH_AGAIN</p>
<h4 id="ssh-channel-change-pty-size"><a href="#ssh-channel-change-pty-size" class="headerlink" title="ssh_channel_change_pty_size()"></a>ssh_channel_change_pty_size()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_change_pty_size</span><span class="params">(ssh_channel channel,<span class="keyword">int</span> cols,<span class="keyword">int</span> rows)</span></span></span><br></pre></td></tr></table></figure>

<p>改变远程终端的大小</p>
<p>参数：</p>
<ul>
<li>channel 使用的信道</li>
<li>cols 分配的列数</li>
<li>rows 分配的行数</li>
</ul>
<p>返回：成功时返回SSH_OK，失败时返回SSH_ERROR</p>
<blockquote>
<p>warning：</p>
</blockquote>
<blockquote>
<p>如果不确定使用相同信道/会话的其他libssh函数是否在同一时间运行(不是100%线程安全)，则不要从信号处理程序调用该函数</p>
</blockquote>
<h4 id="ssh-channel-request-shell"><a href="#ssh-channel-request-shell" class="headerlink" title="ssh_channel_request_shell()"></a>ssh_channel_request_shell()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_request_shell</span><span class="params">(ssh_channel channel)</span></span></span><br></pre></td></tr></table></figure>

<p>请求一个shell</p>
<p>返回：成功时返回SSH_OK，失败时返回SSH_ERROR,在非阻塞模式下如果需要重新调用返回SSH_AGAIN</p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">interactive_shell_session</span><span class="params">(ssh_channel channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_pty(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_change_pty_size(channel,<span class="number">80</span>,<span class="number">24</span>);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_shell(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="显示远程计算机发送的数据"><a href="#显示远程计算机发送的数据" class="headerlink" title="显示远程计算机发送的数据"></a>显示远程计算机发送的数据</h3><p>在程序中通常要接受来自远程终端的数据，需要进行分析，记录或显示</p>
<p>使用ssh_channel_read()和ssh_channel_read_nonblocking()从信道中读取数据</p>
<h4 id="ssh-channel-read"><a href="#ssh-channel-read" class="headerlink" title="ssh_channel_read()"></a>ssh_channel_read()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_read</span><span class="params">(ssh_channel channel,<span class="keyword">void</span>* dest,<span class="keyword">uint32_t</span> count,<span class="keyword">int</span> is_stderr)</span></span></span><br></pre></td></tr></table></figure>

<p>从信道中读取数据</p>
<p>参数：</p>
<ul>
<li>channel 读取数据的来源信道</li>
<li>dest 接受数据的目标缓存区</li>
<li>count 读取的数据大小</li>
<li>is_stderr 标准错误流stderr中的内容的布尔值标志</li>
</ul>
<p>返回：</p>
<p>读取的数据的字节数，在错误时返回0或EOF标记或SSH_ERROR。在无阻塞模式在无可用数据或接受到SSH_AGAIN时返回0</p>
<p>warning：</p>
<p>函数可能返回小于count字节的数据，并在count字节被读取之前不会被阻塞。使用缓存区的读取函数重命名为channel_read_buffer()</p>
<h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">interactive_shell_session</span><span class="params">(ssh_channel channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="built_in">string</span> buffer[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">int</span> nbytes;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_pty(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line">	</span><br><span class="line">	rc = ssh_channel_change_ptu_size(channel,<span class="number">80</span>,<span class="number">24</span>);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_shell(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(ssh_channel_is_open(channel)&amp;&amp;!ssh_channel_is_eof(channel))</span><br><span class="line">	&#123;</span><br><span class="line">		nbytes = ssh_channel_read(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (nbytes&lt;<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (nbytes&gt;<span class="number">0</span>)</span><br><span class="line">			write(<span class="number">1</span>,buffer,nbytes);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="像远程主机发送用户输入"><a href="#像远程主机发送用户输入" class="headerlink" title="像远程主机发送用户输入"></a>像远程主机发送用户输入</h3><p>使用ssh_channel_write()向远程站点发送数据</p>
<h4 id="ssh-channel-write"><a href="#ssh-channel-write" class="headerlink" title="ssh_channel_write()"></a>ssh_channel_write()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_write</span><span class="params">(ssh_channel channel,<span class="keyword">const</span> <span class="keyword">void</span>* data,<span class="keyword">uint32_t</span> len)</span></span></span><br></pre></td></tr></table></figure>

<p>向信道写入块数据</p>
<p>参数：</p>
<ul>
<li>channel 将要写入的信道</li>
<li>data 指向要写入的数据的指针</li>
<li>len 写入的缓冲区的长度</li>
</ul>
<p>返回：写入的字节数；出错时返回SSH_ERROR</p>
<h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kbhit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span> = &#123;</span><span class="number">0L</span>,<span class="number">0L</span>&#125;</span><br><span class="line">	fd_set fdsl</span><br><span class="line"></span><br><span class="line">	FD_ZERO(&amp;fds);</span><br><span class="line">	FD_SET(<span class="number">0</span>,&amp;fds);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> select(<span class="number">1</span>,&amp;fds,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;tv);</span><br><span class="line">&#125;<span class="comment">//用于Linux系统下检测键盘输入，Windows下是标准函数，不能重复定义 有键盘输入返回1，否则为0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">interactive_shell_session</span><span class="params">(ssh_channel channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">	<span class="keyword">int</span> nbytes,nwritten;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (ssh_channel_is_open(channel)&amp;&amp;!ssh_channel_is_eof(channel))<span class="comment">//信道开启且不是结束符</span></span><br><span class="line">	&#123;</span><br><span class="line">		nbytes = ssh_channel_read_nonblocking(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>) <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		<span class="keyword">if</span> (nbytes &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			nwritten = write(<span class="number">1</span>,buffer,nbytes);</span><br><span class="line">			<span class="keyword">if</span> (nwritten != nbytes) <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!kbhit())<span class="comment">//如果键盘没有输入，挂起进程等待0.05秒</span></span><br><span class="line">		&#123;</span><br><span class="line">			usleep(<span class="number">50000L</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		nbytes = read(<span class="number">0</span>,buffer,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">		<span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>) <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		<span class="keyword">if</span> (nbytes &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			nwritten = ssh_channel_write(channel,buffer,nbytes);</span><br><span class="line">			<span class="keyword">if</span> (nwritten != nbytes) <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-channel-is-open"><a href="#ssh-channel-is-open" class="headerlink" title="ssh_channel_is_open()"></a>ssh_channel_is_open()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_is_open</span><span class="params">(ssh_channel channel)</span></span></span><br></pre></td></tr></table></figure>

<p>检查信道是否开启</p>
<p>返回：信道关闭返回0，其他情况返回非0值</p>
<h3 id="在远程终端使用图形界面"><a href="#在远程终端使用图形界面" class="headerlink" title="在远程终端使用图形界面"></a>在远程终端使用图形界面</h3><p>图形界面的远程终端，可以通过X11协议将图形界面转发到本地</p>
<p>首先声明接受ssh_channel_accept_x11()的X11连接，然后使用ssh_channel_request_x11为X11协议创建转发隧道</p>
<h4 id="ssh-channel-accept-x11"><a href="#ssh-channel-accept-x11" class="headerlink" title="ssh_channel_accept_x11()"></a>ssh_channel_accept_x11()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ssh_channel <span class="title">ssh_channel_accept_x11</span><span class="params">(ssh_channel channel,<span class="keyword">int</span> timeout_ms)</span></span></span><br></pre></td></tr></table></figure>

<p>接受X11转发信道</p>
<p>参数：</p>
<ul>
<li>channel 允许X11会话的信道</li>
<li>timeout_ms 微秒为单位的超时值</li>
</ul>
<p>返回：新建立的信道，或当没有从服务器来的X11请求时返回NULL</p>
<h4 id="ssh-channel-request-x11"><a href="#ssh-channel-request-x11" class="headerlink" title="ssh_channel_request_x11()"></a>ssh_channel_request_x11()</h4><p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_request_x11</span><span class="params">(ssh_channel channel,<span class="keyword">int</span> single_connetion,<span class="keyword">const</span> <span class="keyword">char</span>* protocol,<span class="keyword">const</span> <span class="keyword">char</span>* cookie,<span class="keyword">int</span> screen_number)</span></span></span><br></pre></td></tr></table></figure>

<p>通过现有的会话信道发送X11(x11-req)请求，将远程X11应用的显示重定向到本地X服务器</p>
<p>参数：</p>
<ul>
<li>channel 一个用来执行X11程序的现有会话信道</li>
<li>single_connection 标记是否只有单个X11应用被重定向的布尔值</li>
<li>protocol X11身份认证协议，传递NULL使用默认值MIT-MAGIC-COOKIE-1</li>
<li>cookie X11协议cookie，传递NULL生成你随机cookie</li>
<li>screen_number 屏幕号</li>
</ul>
<p>返回：成功时返回SSH_OK,出错时返回SSH_ERROR，非阻塞模式下需要重新调用返回SSH_AGAIN</p>
<h4 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">interactive_shell_session</span><span class="params">(ssh_channel channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	ssh_channel x11channel;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_pty(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_change_pty_size(channel,<span class="number">80.24</span>);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_x11(channel,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(rc != SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_request_shell(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc = !=SSH_OK) <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Chapter4-传递远程命令"><a href="#Chapter4-传递远程命令" class="headerlink" title="Chapter4:传递远程命令"></a>Chapter4:传递远程命令</h2><p>该方法只适用于执行一个远程命令，如果要发出多个命令，应使用非交互式远程shell</p>
<h3 id="执行远程命令"><a href="#执行远程命令" class="headerlink" title="执行远程命令"></a>执行远程命令</h3><h4 id="1-打开一个SSH信道"><a href="#1-打开一个SSH信道" class="headerlink" title="1.打开一个SSH信道"></a>1.打开一个SSH信道</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show_remote_files</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_channel channel;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	channel = ssh_channel_new(session);</span><br><span class="line">	<span class="keyword">if</span> (channel == <span class="literal">NULL</span>) <span class="keyword">return</span> SSH_ERROR;<span class="comment">//创建一个信道</span></span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_open_session(channel);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_free(channel);<span class="comment">//如果不能开启会话，释放掉当前信道</span></span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-执行远程命令"><a href="#2-执行远程命令" class="headerlink" title="2.执行远程命令"></a>2.执行远程命令</h4><p>调用ssh_channel_request_exec()执行远程命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">rc = ssh_channel_request_exec(channel,<span class="string">"ls -l"</span>);</span><br><span class="line"><span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">&#123;</span><br><span class="line">	ssh_channel_close(channel);</span><br><span class="line">	ssh_channel_free(channel);</span><br><span class="line">	<span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ssh_channel_request_exec()</p>
<p>定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_request_exec</span><span class="params">(ssh_channel channel,<span class="keyword">const</span> <span class="keyword">char</span>* cmd)</span></span></span><br></pre></td></tr></table></figure>

<p>运行一条没有交互式shell的shell命令，类似于执行’sh -c command’</p>
<p>参数：</p>
<ul>
<li>channel 执行命令的信道</li>
<li>cmd 执行的命令</li>
</ul>
<p>返回：成功时返回SSH_OK,出错时返回SSH_ERROR，非阻塞模式下需要重新调用返回SSH_AGAIN</p>
<h4 id="3-获取数据"><a href="#3-获取数据" class="headerlink" title="3.获取数据"></a>3.获取数据</h4><p>远程命令显示数据，调用ssh_channel_read()获取数据。改善书返回读取的字节数。如果信道上没有更多数据，则函数返回0，转到下一步；如果月到错误，则返回负值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> nbytes;</span><br><span class="line"></span><br><span class="line">nbytes = ssh_channel_read(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (nbytes &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (fwrite(buffer,<span class="number">1</span>,bytes,<span class="built_in">stdout</span>)！=nbytes)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_close(channel);</span><br><span class="line">		ssh_channel_free(channel);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	nbytes = ssh_channel_read(channel,buffer,<span class="keyword">sizeof</span>(buffer),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	ssh_channel_close(channel);</span><br><span class="line">	ssh_channel_free(channel);</span><br><span class="line">	<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-结束"><a href="#4-结束" class="headerlink" title="4.结束"></a>4.结束</h4><p>读取远程命令的结果后，将文件结束符EOF发送到信道，关闭信道并释放信道</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ssh_channel_send_eof(channel);</span><br><span class="line">ssh_channel_close(channel);</span><br><span class="line">ssh_channel_free(channel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SSH_OK</span><br></pre></td></tr></table></figure>

<h2 id="Chapter-5-SFTP子系统"><a href="#Chapter-5-SFTP子系统" class="headerlink" title="Chapter 5:SFTP子系统"></a>Chapter 5:SFTP子系统</h2><p>SFTP是安全文件传输协议的简称,可以用于本地与远程计算机的远程传输.SFTP的功能丰富,现有的版本是版本3,虽然未解决全部功能,但核心功能已经实现</p>
<h3 id="打开和关闭SFTP会话"><a href="#打开和关闭SFTP会话" class="headerlink" title="打开和关闭SFTP会话"></a>打开和关闭SFTP会话</h3><p>SFTP子系统不是打开一个SSH信道,而是开启一个SFTP会话</p>
<p>用sftp_new()创建一个新的SFTP会话,用函数sftp_free()初始化,sftp_free()删除.</p>
<h4 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/sftp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_helloworld</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sftp_session sftp;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	sftp = sftp_new(session);</span><br><span class="line">	<span class="keyword">if</span> (sftp = <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error allocationg SFTP session:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = sftp_init(sftp);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error initializing SFTP session:%s.\n"</span>,sftp_get_error(sftp));</span><br><span class="line">		sftp_free(sftp);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sftp_free(sftp);</span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sftp-new"><a href="#sftp-new" class="headerlink" title="sftp_new()"></a>sftp_new()</h4><p>定义:</p>
<pre><code>sftp_session sftp_new(ssh_session session)</code></pre><p>返回:正确分配一个sftp会话或错误时返回NULL</p>
<p>需要使用stfp_free()进行释放</p>
<h4 id="sftp-init"><a href="#sftp-init" class="headerlink" title="sftp_init()"></a>sftp_init()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_init</span><span class="params">(sftp_session sftp)</span></span></span><br></pre></td></tr></table></figure>

<p>参数:sftp:将要初始化的sftp会话</p>
<p>返回:成功时返回0,失败时返回&lt;0的值并抛出ssh错误</p>
<h4 id="sftp-free"><a href="#sftp-free" class="headerlink" title="sftp_free()"></a>sftp_free()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sftp_free</span><span class="params">(sftp_session sftp)</span></span></span><br></pre></td></tr></table></figure>

<p>关闭并释放一个sftp会话</p>
<h3 id="SFTP错误"><a href="#SFTP错误" class="headerlink" title="SFTP错误"></a>SFTP错误</h3><p>产生错误时,除ssh_get_error_number()抛出常规SSH错误外,使用sftp_get_error()返回SFTP错误号</p>
<h4 id="sftp-get-error"><a href="#sftp-get-error" class="headerlink" title="sftp_get_error()"></a>sftp_get_error()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_get_error</span><span class="params">(sftp_session sftp)</span></span></span><br></pre></td></tr></table></figure>

<p>获取最后一个错误</p>
<p>返回:保存的错误,如果函数出错返回&lt;0</p>
<h4 id="错误编号"><a href="#错误编号" class="headerlink" title="错误编号"></a>错误编号</h4><ul>
<li>SSH_FX_OK: 无错误</li>
<li>SSH_FX_\EOF: 遇到文件结束符EOF</li>
<li>SSH_FX_NO_SUCH_FILE: 文件不存在</li>
<li>SSH_FX_PERMISSION_DENIED: 权限被拒绝</li>
<li>SSH_FX_FAILURE: 通配失败</li>
<li>SSH_FX_BAD_MESSAGE: 从服务器收到garbage</li>
<li>SSH_FX_NO_CONNECTION: 未建立链接</li>
<li>SSH_FX_CONNECTION_LOST: 存在链接但已丢失</li>
<li>SSH_FX_OP_UNSUPPORTED: 操作不受libssh支持</li>
<li>SSH_FX_INVALID_HANDLE: 无效的文件句柄</li>
<li>SSH_FX_NO_SUCH_PATH: 不存在此文件或目录</li>
<li>SSH_FX_FILE_ALREADY_EXISTS: 尝试创建已经存在的文件或目录</li>
<li>SSH_FX_WRITE_PROTECT: 写保护的文件系统</li>
<li>SSH_FX_NO_MEDIA: 远程驱动中没有介质</li>
</ul>
<h3 id="创建一个目录"><a href="#创建一个目录" class="headerlink" title="创建一个目录"></a>创建一个目录</h3><p>通过sftp_mkdir()创建目录,目录权限和mkdir函数相同.所需的权限与远程用户的掩码组合确定有效权限</p>
<h4 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/sftp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_helloworld</span><span class="params">(ssh_session session,sftp_session sftp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = sftp_mkdir(sftp,<span class="string">"helloworld"</span>,S_IRWXU);</span><br><span class="line">	<span class="keyword">if</span> (rc!=SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (sftp_get_error(sftp)!=SSH_FX_FILE_ALREADY_EXISTS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"无法创建目录:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">			<span class="keyword">return</span> rc;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sftp-mkdir"><a href="#sftp-mkdir" class="headerlink" title="sftp_mkdir()"></a>sftp_mkdir()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_mkdir</span><span class="params">(sftp_session sftp,<span class="keyword">const</span> <span class="keyword">char</span>* directory,<span class="keyword">mode_t</span> mode)</span></span></span><br></pre></td></tr></table></figure>

<p>创建目录</p>
<p>参数:</p>
<ul>
<li>sftp sftp会话的句柄</li>
<li>diretory 将要创建的目录</li>
<li>mode 指定要使用的权限.由进程的umask掩码进行修饰,通常以创建文件的(mode&amp;~umask)(即mode与用户掩码umask进行位与后的结果)方式决定权限</li>
</ul>
<p>返回:成功时返回0,错误时返回&lt;0并抛出ssh和sftp错误</p>
<p>与SCP系统中不同,该函数不会将当前目录切换到新创建的目录中</p>
<h3 id="向远程计算机拷贝文件"><a href="#向远程计算机拷贝文件" class="headerlink" title="向远程计算机拷贝文件"></a>向远程计算机拷贝文件</h3><p>可以像处理本地文件一样处理远程文件的内容:以特定模式打开文件,移动文件指针,读取或写入数据以及关闭文件</p>
<p>调用sftp_open()函数,该函数类似与本地的open()函数,并额外返回一个sftp_file类型的文件句柄,该文件句柄可以由其他文件操作函数使用,并保持有效直到调用sftp_close()关闭该远程文件</p>
<h4 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/sftp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_helloworld</span><span class="params">(ssh_session session,sftp_session sftp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> access_type  = O_WRONLY | O_CREAT | O_TRUNC;</span><br><span class="line">	sftp_file file;<span class="comment">//open()函数参数设定,写模式,不存在文件新建,以存在文件,长度被截为0</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *helloworld = <span class="string">"Hello,World!\n"</span>;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="built_in">strlen</span>(helloworld);</span><br><span class="line">	<span class="keyword">int</span> rc,nwritten;</span><br><span class="line"></span><br><span class="line">	file = sftp_open(sftp,<span class="string">"helloworld/helloworld.txt"</span>,access_type,S_IPWXU);</span><br><span class="line">	<span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't open file for writing:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	nwritten = sftp_write(file,helloworld,length);</span><br><span class="line">	<span class="keyword">if</span> (nwritten != length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't write data to file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		sftp_close(file);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = sftp_close(file);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't close the written file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sftp-open"><a href="#sftp-open" class="headerlink" title="sftp_open()"></a>sftp_open()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sftp_file <span class="title">sftp_open</span><span class="params">(sftp_session session,<span class="keyword">const</span> <span class="keyword">char</span>* file,<span class="keyword">int</span> accessype,<span class="keyword">mode_t</span> mode)</span></span></span><br></pre></td></tr></table></figure>

<p>在远程服务器打开(创建)文件</p>
<p>参数:</p>
<ul>
<li>session sftp会话句柄</li>
<li>file 将要打开的文件(指针)</li>
<li>accesstype open函数参数,指定文件操作类型等参数</li>
<li>mode 如果要创建新文件,指定要使用的权限.由进程的umask掩码进行修饰,通常以创建文件的(mode&amp;~umask)(即mode与用户掩码umask进行位与后的结果)方式决定权限</li>
</ul>
<p>返回:成功时返回文件句柄(指针),错误时返回NULL并抛出ssh和sftp错误</p>
<h4 id="sftp-close"><a href="#sftp-close" class="headerlink" title="sftp_close()"></a>sftp_close()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_close</span><span class="params">(sftp_file file)</span></span></span><br></pre></td></tr></table></figure>

<p>释放指针关闭打开的文件句柄</p>
<p>返回:正常关闭时返回SSH_NO_\ERROR,发生错误是返回SSH_ERROR</p>
<h3 id="从远程计算机读取文件"><a href="#从远程计算机读取文件" class="headerlink" title="从远程计算机读取文件"></a>从远程计算机读取文件</h3><p>通过sftp读取网络文件,可以通过同步或一部两种方式完成</p>
<p>同步读取使用sftp_read()完成</p>
<h4 id="同步读取文件"><a href="#同步读取文件" class="headerlink" title="同步读取文件"></a>同步读取文件</h4><p>调用sftp_read()函数.文件通常以块形式传输,一个好的文件块大小是16KB.</p>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以16KB文件块远程打开"/etc/profile"文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_XFER_BUF_SIZE 16384  <span class="comment">//16KB</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_read_sync</span><span class="params">(ssh_session session,sftp_session sftp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> access_type;</span><br><span class="line">	sftp_file file;</span><br><span class="line">	<span class="keyword">char</span> buffer[MAX_XFER_BUF_SIZE];</span><br><span class="line">	<span class="keyword">int</span> nbytes,nwritten,rc;</span><br><span class="line">	<span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">	access_type = O_RDONLY;</span><br><span class="line">	file = sftp_open(sftp,<span class="string">"etc/profile"</span>,access_type,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't open file for reading:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fd = open(<span class="string">"/path/to/profile"</span>,O_CREAT);</span><br><span class="line">	<span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't open file for writing:%s\n"</span>,strerror(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(;;)<span class="comment">//读取文件块直到缓存区为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		nbytes = sftp_read(file,buffer,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">		<span class="keyword">if</span> (nbytes == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error while reading file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">			sftp_close(file);</span><br><span class="line">			<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		nwritten = write(fd,buffer,nbytes);</span><br><span class="line">		<span class="keyword">if</span> (nwritten != nbytes)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error writing:%s\n"</span>,strerror(errno));</span><br><span class="line">			sftp_close(file);</span><br><span class="line">			<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = sftp_close(file);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't close the read file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>sftp_read()</strong></p>
<p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> sftp_read(sftp_file file,<span class="keyword">void</span>* buf,<span class="keyword">size_t</span> count)</span><br></pre></td></tr></table></figure>

<p>从打开的文件句柄(文件指针)中读取文件</p>
<p>参数:</p>
<ul>
<li>file 打开的文件指针</li>
<li>buf 接收文件内容的缓存区指针</li>
<li>count 以字节为单位的缓存区大小</li>
</ul>
<p>返回:写入的数据字节数,发生错误时返回&lt;0并抛出ssh和sftp错误</p>
<h4 id="异步读取数据"><a href="#异步读取数据" class="headerlink" title="异步读取数据"></a>异步读取数据</h4><p>异步读取分两步完成,首先调用sftp_asyns_read_begin(),返回一个请求句柄</p>
<p>然后调用sftp_async_read(),使用该句柄.如果文件以非阻塞模式打开,则该函数可能会返回SSH_AGAIN,此时请求尚未完成,需要稍后重新调用.否则调用sftp_async_read()等待数据到来</p>
<p>以非阻塞模式打开文件,需要在打开文件后立即调用sftp_set_nonblocking()函数(默认时阻塞模式)</p>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_XFER_BUF_SIZE 16384</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_read_async</span><span class="params">(ssh_session,sftp_sesison sftp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> access_type;</span><br><span class="line">	sftp_file file;</span><br><span class="line">	<span class="keyword">char</span> buffer [MAX_XFER_BUF_SIZE];</span><br><span class="line">	<span class="keyword">int</span> async_request;</span><br><span class="line">	<span class="keyword">int</span> nbytesl</span><br><span class="line">	<span class="keyword">long</span> counter;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	access_type = O_RDONLY;</span><br><span class="line">	file = sftp_open(sftp,<span class="string">"some_very_big_file"</span>,access_type,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (file == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't open file for reading:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	sftp_file_set_nonblocking(file);</span><br><span class="line"></span><br><span class="line">	async_request = sftp_async_read_begin(file,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">	counter = <span class="number">0L</span>;</span><br><span class="line">	usleep(<span class="number">10000</span>);</span><br><span class="line">	<span class="keyword">if</span> (async_request &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		nbytes = sftp_async_read(file,buffer,<span class="keyword">sizeof</span>(buffer),async_request);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		nbytes = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (nbytes &gt; <span class="number">0</span>)||nbytes == SSH_AGAIN)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (nbytes &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			write(<span class="number">1</span>,buffer,nbytes);</span><br><span class="line">			async_request = sftp_async_read_begin(file,<span class="keyword">sizeof</span>(buffer));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			counter++;</span><br><span class="line">		&#125;</span><br><span class="line">		usleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (async_request &gt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			nbytes = sftp_async_read(file,buffer,<span class="keyword">sizeof</span>(buffer),async_request);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			nbytes = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error while reading file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		sftp_close(file);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"The counter has reached value: %ld\n"</span>,counter);</span><br><span class="line"></span><br><span class="line">	rc = sftp_close(file);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't close the read file:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>sftp_async_read_begin()</strong></p>
<p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_async_read_begin</span><span class="params">(sftp_file file,<span class="keyword">uint32_t</span> len)</span></span></span><br></pre></td></tr></table></figure>

<p>使用打开的sftp文件句柄进行异步读取.目标是避免与同步读取方式/响应模式相关的慢速读取</p>
<p>参数:</p>
<ul>
<li>file 读取的打开的文件句柄</li>
<li>len 将要读取的字节数</li>
</ul>
<p>返回:与发送的请求对应的响应符,错误时返回&lt;0</p>
<blockquote>
<p><strong>warning</strong>:</p>
</blockquote>
<blockquote>
<p>调用该函数时,内部偏移量将会根据len参数进行更新,调用该函数会向服务器发送请求,若服务器应答,libssh非配内存存储响应,直到sftp_async_read()被调用.如果不调用sftp_async_read()会导致内存泄漏</p>
</blockquote>
<p><strong>sftp_async_read()</strong></p>
<p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_async_read</span><span class="params">(sftp_file file,<span class="keyword">void</span>* data,<span class="keyword">uint32_t</span> len,<span class="keyword">uint32_t</span> id)</span></span></span><br></pre></td></tr></table></figure>

<p>等待异步传输读取完成并保存数据</p>
<p>参数:</p>
<ul>
<li>file 将要被读取的文件句柄</li>
<li>data 指向接收数据的缓存区的指针</li>
<li>len 以字节为单位的缓存区的大小,应该大于等于sftp_async_read_begin()调用的长度参数</li>
<li>id sftp_async_read_begin()返回的标识符</li>
</ul>
<p>返回:读取的字节数;遇到EOF文件结束符返回0;错误时返回SSH_ERROR;阻塞模式返回SSH_AGAIN并需要之后再次访问</p>
<blockquote>
<p><strong>warning</strong>:</p>
</blockquote>
<blockquote>
<p>使用无效标识符调用该函数将永远不会返回</p>
</blockquote>
<p><strong>sftp_file_set_nonblocking()</strong></p>
<p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sftp_file_set_nonblocking</span><span class="params">(sftp_file handle)</span></span></span><br></pre></td></tr></table></figure>

<p>将传入的文件句柄设置为无阻塞通信模式</p>
<h3 id="列出目录的内容"><a href="#列出目录的内容" class="headerlink" title="列出目录的内容"></a>列出目录的内容</h3><p>使用handle_type:sftp_dir的句柄类型,访问正在读取的目录</p>
<h4 id="sftp-opendir"><a href="#sftp-opendir" class="headerlink" title="sftp_opendir()"></a>sftp_opendir()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sftp_dir <span class="title">sftp_opendir</span><span class="params">(sftp_session session,<span class="keyword">const</span> <span class="keyword">char</span>* path)</span></span></span><br></pre></td></tr></table></figure>

<p>打开一个用于获取远程目录条目的目录</p>
<p>参数:</p>
<ul>
<li>session 打开目录的sftp句柄</li>
<li>path 将要打开的目录地址</li>
</ul>
<p>返回:成功时返回目录的sftp句柄 错误时返回NULL并抛出ssh和sftp错误</p>
<h4 id="sftp-readdir"><a href="#sftp-readdir" class="headerlink" title="sftp_readdir()"></a>sftp_readdir()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">sftp_attributes <span class="title">sftp_readdir</span><span class="params">(sftp_session,sftp_dir dir)</span></span></span><br></pre></td></tr></table></figure>

<p>获取目录的单个文件属性结构</p>
<p>参数:</p>
<ul>
<li>session 将要读取的目录的sftp会话句柄</li>
<li>dir 将要读取的目录的sftp句柄</li>
</ul>
<p>返回:文件属性结构,出错或目录结尾处返回NULL</p>
<blockquote>
<p>文件属性结构 即一个sftp_attributes类型,是一个指向具有目录条目信息结构的指针:</p>
</blockquote>
<blockquote>
<ul>
<li>name:目录或文件的名称</li>
<li>size:以比特为单位的大小</li>
<li>等等其他属性</li>
</ul>
</blockquote>
<blockquote>
<p>在出错或目录结尾处可能会返回NULL.通过sftp_dir_eof()判断是否目录结尾</p>
</blockquote>
<p>不需要时,必须用sftp_attributes_free()释放属性</p>
<h4 id="sftp-dir-eof"><a href="#sftp-dir-eof" class="headerlink" title="sftp_dir_eof()"></a>sftp_dir_eof()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_dir_eof</span><span class="params">(sftp_dir dir)</span></span></span><br></pre></td></tr></table></figure>

<p>确定是否达到了文件结束符EOF</p>
<p>参数:dir sftp目录句柄</p>
<p>返回:是EOF时返回1,不是则返回0</p>
<h4 id="sftp-closedir"><a href="#sftp-closedir" class="headerlink" title="sftp_closedir()"></a>sftp_closedir()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_closedir</span><span class="params">(sftp_dir dir)</span></span></span><br></pre></td></tr></table></figure>

<p>关闭目录句柄</p>
<p>返回:SSH_NO_ERROR或SSH_ERROR</p>
<h4 id="sftp-attributes-free"><a href="#sftp-attributes-free" class="headerlink" title="sftp_attributes_free()"></a>sftp_attributes_free()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sftp_attributes_free</span><span class="params">(sftp_attributes file)</span></span></span><br></pre></td></tr></table></figure>

<p>释放sftp属性结构的指针</p>
<h4 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sftp_list_dir</span><span class="params">(ssh_session,sftp_session sftp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	sftp_dir dir;</span><br><span class="line">	sftp_attributes attributes;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	dir = sftp_opendir(sftp,<span class="string">"/var/log"</span>);</span><br><span class="line">	<span class="keyword">if</span> (!dir)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Directory not opened:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Name          Size Perms	Owner\tGroup\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>((attributes = sftp_readdir(sftp,dir)) != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%-20s %10llu %.8o %s(%d)\t%s(%d)\n"</span>,attributes-&gt;name,(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>)attributes-&gt;size,attributes-&gt;permissions,attributes-&gt;owner,attributes-&gt;uid,attributes-&gt;group,attributes-&gt;gid);</span><br><span class="line"></span><br><span class="line">		sftp_attributes_free(attributes);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!sftp_dir_eof(dir))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't list directory: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		sftp_closedir(dir);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = sftp_closedir(dir);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't close directory: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Chapter-6-SCP子系统"><a href="#Chapter-6-SCP子系统" class="headerlink" title="Chapter 6:SCP子系统"></a>Chapter 6:SCP子系统</h2><p>SCP子系统的功能远远少于SFTP子系统,但如果只需要从远程系统复制文件,SCP可以胜任</p>
<h3 id="开启-关闭SCP会话"><a href="#开启-关闭SCP会话" class="headerlink" title="开启/关闭SCP会话"></a>开启/关闭SCP会话</h3><p>SCP子系统中,不直接操作SSH信道,而是开启一个SCP会话</p>
<p>SCP会话中不能同时进行读和写的操作,需要在调用ssh_scp_new()函数时指定读写模式</p>
<p>另一个重要的模式参数是SSH_SCP_RECURSIVE,声明是否使用递归读取目录的方式</p>
<p>ssh_scp_new()创建会话,ssh_scp_init()进行初始化.完成传输后,使用ssh_scp_close()终止SCP链接,并调用ssh_scp_free()释放分配的连接</p>
<h4 id="示例1-递归写入"><a href="#示例1-递归写入" class="headerlink" title="示例1:递归写入"></a>示例1:递归写入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scp_write</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_scp scp;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	scp = ssh_scp_new(session,SSH_SCP_WRITE|SSH_SCP_RECURSIVE,<span class="string">"."</span>);</span><br><span class="line">	<span class="keyword">if</span> (scp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error allocating scp session:%s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_init(scp);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error initializing scp session: %s\n"</span>);</span><br><span class="line">		ssh_scp_free(scp);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_scp_close(scp);</span><br><span class="line">	ssh_scp_free(scp);</span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="示例2-打开连接读取单个文件"><a href="#示例2-打开连接读取单个文件" class="headerlink" title="示例2:打开连接读取单个文件"></a>示例2:打开连接读取单个文件</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scp_read</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_scp scp;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line"></span><br><span class="line">	scp = ssh_scp_new(session,SSH_SCP_READ,<span class="string">"hello/helloworld.txt"</span>);</span><br><span class="line">	<span class="keyword">if</span> (scp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error allocating scp session: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_init(scp);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error initializing scp session: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		ssh_scp_free(scp);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_scp_close(scp);</span><br><span class="line">	ssh_scp_free(scp);</span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-scp-new"><a href="#ssh-scp-new" class="headerlink" title="ssh_scp_new()"></a>ssh_scp_new()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ssh_scp <span class="title">ssh_scp_new</span><span class="params">(ssh_session session,<span class="keyword">int</span> mode,<span class="keyword">const</span> <span class="keyword">char</span>* location)</span></span></span><br></pre></td></tr></table></figure>

<p>创建一个新的scp会话</p>
<p>参数:</p>
<ul>
<li>session 使用的SSH会话</li>
<li>mode 标志位 SSH_SCP_WRITE/SSH_SCP_READ,选择读/写模式.SSH_SCP_RECURSIVE可以通过位或运算添加到参数中,表示可以递归操作(访问目录必须)</li>
<li>location 写入或读取的目录</li>
</ul>
<p>返回:ssh_scp句柄,失败时返回NULL</p>
<h4 id="ssh-scp-init"><a href="#ssh-scp-init" class="headerlink" title="ssh_scp_init()"></a>ssh_scp_init()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_init</span><span class="params">(ssh_scp scp)</span></span></span><br></pre></td></tr></table></figure>

<p>初始化一个scp信道</p>
<p>返回:成功时返回SSH_OK,失败时返回SSH失败码</p>
<h4 id="ssh-scp-close"><a href="#ssh-scp-close" class="headerlink" title="ssh_scp_close()"></a>ssh_scp_close()</h4><p>关闭scp信道</p>
<p>参数: scp 要关闭的scp连接</p>
<p>返回: 成功时返回SSH_OK,失败时返回SSH错误码</p>
<h4 id="ssh-scp-free"><a href="#ssh-scp-free" class="headerlink" title="ssh_scp_free()"></a>ssh_scp_free()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ssh_scp_free</span><span class="params">(ssh_scp scp)</span></span></span><br></pre></td></tr></table></figure>

<p>释放scp上下文</p>
<h3 id="创建文件和目录"><a href="#创建文件和目录" class="headerlink" title="创建文件和目录"></a>创建文件和目录</h3><p><strong>创建目录:</strong>调用ssh_scp_push_diretory()创建目录.在递归模式下,创建目录后会直接进入该目录.如果目录已经存在,且处于递归模式,直接输入该目录即可</p>
<p><strong>创建文件:</strong>分为两步,先调用ssh_scp_push_file()准备写入;然后调用ssh_scp_write()写入数据.两个函数间要写入的数据长度必须相同.</p>
<p>不需要打开/关闭文件操作,远端自动完成此操作.如果文件已经存在,将会被覆盖并截断</p>
<h4 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scp_helloworld</span><span class="params">(ssh_session session,ssh_scp scp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *helloworld = <span class="string">"Hello\n"</span>;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="built_in">strlen</span>(helloworld);</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_push_diretory(scp,<span class="string">"helloworld"</span>,S_IRWXU);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't create remote diretory: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_push_file(scp,<span class="string">"helloworld.txt"</span>,length,S_IRUSR|S_IWUSR);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't open remote file: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_write(scp,helloworld,length);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Can't write to remote file: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-scp-push-directory"><a href="#ssh-scp-push-directory" class="headerlink" title="ssh_scp_push_directory()"></a>ssh_scp_push_directory()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_push_diretory</span><span class="params">(ssh_scp scp,<span class="keyword">const</span> <span class="keyword">char</span>* dirname,<span class="keyword">int</span> mode)</span></span></span><br></pre></td></tr></table></figure>

<p>在sink模式下创建一个目录</p>
<p>参数:</p>
<ul>
<li>scp scp句柄</li>
<li>dirname 将要创建的目录名</li>
<li>mode UNIX权限数值</li>
</ul>
<p>返回:成功创建目录返回SSH_OK,出错时返回SSH_ERROR</p>
<h4 id="ssh-scp-push-file"><a href="#ssh-scp-push-file" class="headerlink" title="ssh_scp_push_file()"></a>ssh_scp_push_file()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_push_file</span><span class="params">(ssh_scp scp,<span class="keyword">const</span> <span class="keyword">char</span>* filename,<span class="keyword">size_t</span> size,<span class="keyword">int</span> mode)</span></span></span><br></pre></td></tr></table></figure>

<p>初始化文件传输</p>
<p>参数:</p>
<ul>
<li>scp scp句柄</li>
<li>filename 将要传输的文件名,不应包含任何路径信息</li>
<li>size 发送文件的字节大小</li>
<li>mode 新文件的UNIX权限</li>
</ul>
<p>返回:如果文件准备好发送,返回SSH_OK;发生错误返回SSH_ERROR</p>
<h4 id="ssh-scp-write"><a href="#ssh-scp-write" class="headerlink" title="ssh_scp_write()"></a>ssh_scp_write()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_write</span><span class="params">(ssh_scp scp,<span class="keyword">const</span> <span class="keyword">void</span>* buffer,<span class="keyword">size_t</span> len)</span></span></span><br></pre></td></tr></table></figure>

<p>写入远程文件</p>
<p>参数:</p>
<ul>
<li>scp scp句柄</li>
<li>buffer 将要写入的缓存区</li>
<li>len 将要吸入的字节数</li>
</ul>
<p>返回:写入成功返回SSH_OK,发生错误返回SSH_ERROR</p>
<h3 id="读取文件和目录"><a href="#读取文件和目录" class="headerlink" title="读取文件和目录"></a>读取文件和目录</h3><p>要接收文件,可以调用ssh_scp_pull_request()向远程端发起请求.</p>
<p>如果函数返回SSH_SCP_REQUEST_NEWFILE,则必须准备好接收文件.</p>
<p>可以调用ssh_scp_request_get_size()获取文件大小并据此分配缓存区.</p>
<p>准备好接收文件后,发送ssh_scp_accept_request(),然后调用ssh_scp_read()读取数据</p>
<h4 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scp_receive</span><span class="params">(ssh_session session,ssh_scp scp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">int</span> size,mode;</span><br><span class="line">	<span class="keyword">char</span> *filename, *buffer;</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_pull_request(scp);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_SCP_REQUEST_NEWFILE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error receiving information about file: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	size = ssh_scp_request_get_size(scp);</span><br><span class="line">	filename = strdup(ssh_scp_request_get_filename(scp));</span><br><span class="line">	mode = ssh_scp_reqiest_get_permissions(scp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Receiving file %s, size %d, permissions 0%o\n"</span>,filename,size,mode);</span><br><span class="line">	<span class="built_in">free</span>(filename);</span><br><span class="line"></span><br><span class="line">	buffer = <span class="built_in">malloc</span>(size);</span><br><span class="line">	<span class="keyword">if</span> (buffer == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Memory allocation error\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_scp_accept_request(scp);</span><br><span class="line">	rc = ssh_scp_read(scp, buffer, size);</span><br><span class="line">	<span class="keyword">if</span> (rc = SSH_ERROR)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Error receiving file data: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="built_in">free</span>(buffer);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Done\n"</span>);</span><br><span class="line"></span><br><span class="line">	write(<span class="number">1</span>, buffer, size);</span><br><span class="line">	<span class="built_in">free</span>(buffer);</span><br><span class="line"></span><br><span class="line">	rc = ssh_scp_pull_request(scp);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_SCP_REQUEST_EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Unexpected request: %s\n"</span>,ssh_get_error(session));</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-scp-pull-request"><a href="#ssh-scp-pull-request" class="headerlink" title="ssh_scp_pull_request()"></a>ssh_scp_pull_request()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_pull_request</span><span class="params">(ssh_scp scp)</span></span></span><br></pre></td></tr></table></figure>

<p>等待一个scp请求(文件,目录)</p>
<p>返回:</p>
<ul>
<li>SSH_SCP_REQUEST_NEWFILE:另一端在传输一个文件</li>
<li>SSH_SCP_REQUEST_NEWDIR:另一端在传输一个目录</li>
<li>SSH_SCP_ENDDIR:另一端完成了当前目录的传输</li>
<li>SSH_SCP_REQUEST_WARNING:另一端发送了一个警告</li>
<li>SSH_SCP_REQUEST_EOF:另一端完成了文件和数据的传输</li>
<li>SSH_ERROR:发生了错误</li>
</ul>
<h4 id="ssh-scp-request-get-size"><a href="#ssh-scp-request-get-size" class="headerlink" title="ssh_scp_request_get_size()"></a>ssh_scp_request_get_size()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">size_t</span> ssh_scp_request_get_size(ssh_scp scp)</span><br></pre></td></tr></table></figure>

<p>获取另一端传输的文件的大小</p>
<p>返回:将要读取的文件的大小</p>
<blockquote>
<p><strong>Warining:</strong></p>
</blockquote>
<blockquote>
<p>实际大小可能不适合32位文件域,可能会发生截断</p>
</blockquote>
<h4 id="ssh-scp-accept-request"><a href="#ssh-scp-accept-request" class="headerlink" title="ssh_scp_accept_request()"></a>ssh_scp_accept_request()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_accept_request</span><span class="params">(ssh_scp scp)</span></span></span><br></pre></td></tr></table></figure>

<p>接收远程主机传输的文件或创建目录</p>
<p>返回:SSH_OK;SSH_ERROR</p>
<h4 id="ssh-scp-read"><a href="#ssh-scp-read" class="headerlink" title="ssh_scp_read()"></a>ssh_scp_read()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_read</span><span class="params">(ssh_scp scp,<span class="keyword">void</span>* buffer,<span class="keyword">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>

<p>读取远程文件</p>
<p>参数:</p>
<ul>
<li>scp scp句柄</li>
<li>buffer 目标缓存区</li>
<li>size 缓存区的大小</li>
</ul>
<p>返回:读取的字节数;错误时返回SSH_ERROR</p>
<h4 id="ssh-scp-leave-directory"><a href="#ssh-scp-leave-directory" class="headerlink" title="ssh_scp_leave_directory()"></a>ssh_scp_leave_directory()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_scp_leave_diretory</span><span class="params">(ssh_scp scp)</span></span></span><br></pre></td></tr></table></figure>

<p>离开一个目录</p>
<p>返回:SSH_OK;SSH_ERROR</p>
<h3 id="从远程服务器接收完整的目录数"><a href="#从远程服务器接收完整的目录数" class="headerlink" title="从远程服务器接收完整的目录数"></a>从远程服务器接收完整的目录数</h3><p>以递归模式打开SCP会话,远程端会告知何时更改目录</p>
<p>调用ssh_scp_pull_request()返回SSH_SCP_REQUEST_NEWDIRECTORY时,应使用该本地目录输入;返回SSH_SCP_REQUEST_ENDDIRECTORY时,应离开当前目录.</p>
<h2 id="Chapter7-转发连接-隧道"><a href="#Chapter7-转发连接-隧道" class="headerlink" title="Chapter7: 转发连接(隧道)"></a>Chapter7: 转发连接(隧道)</h2><p>端口转发采用两种不同的SSH协议:直接或反向端口转发.直接端口转发即本地端口转发,反向端口转发即远程端口转发</p>
<h3 id="直接端口转发"><a href="#直接端口转发" class="headerlink" title="直接端口转发"></a>直接端口转发</h3><p>直接端口转发时从客户端向服务器的转发.客户端打开一个隧道,并将任何数据转发给服务器;然后服务器连接到一个终点,终点口语主流在另一台机器或SSH服务器本身上</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><pre><code>app-&gt;本地端口-&gt;SSH客户端 ===&gt;SSH服务器-&gt;远程端口-&gt;目标app</code></pre><h4 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h4><pre><code>Mail client application   Google Mail
         |                     ^
     5555 (任意端口)            |
         |                143 (IMAP2)
        V                    |
    SSH client   =====&gt;   SSH server 

图例:
 --P--&gt;: 通过端口P连接端口
 =====&gt;: SSH隧道</code></pre><p>邮件客户端连接到客户端的端口5555,客户端向服务器建立加密隧道.服务器连接到Google邮件服务器的143端口(终点).本地邮件服务器可以向远程发送邮件</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">direct_forwarding</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ssh_channel forwarding_channel;</span><br><span class="line">	<span class="keyword">int</span> rc;</span><br><span class="line">	<span class="keyword">char</span> *http_get = <span class="string">"GET / HTTP/1.1\nHost: www.google.com\n\n"</span>;</span><br><span class="line">	<span class="keyword">int</span> nbytes, nwritten;</span><br><span class="line"></span><br><span class="line">	forwarding_channel = ssh_channel_new(session);</span><br><span class="line">	<span class="keyword">if</span> (forwarding_channel == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line"></span><br><span class="line">	rc = ssh_channel_open_forward(forwarding_channel,<span class="string">"www.google.com"</span>,<span class="number">80</span>,<span class="string">"localhost"</span>,<span class="number">5555</span>);</span><br><span class="line">	<span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_free(forwarding_channel);</span><br><span class="line">		<span class="keyword">return</span> rc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	nbytes = <span class="built_in">strlen</span>(http_get);</span><br><span class="line">	nwritten = ssh_channel_write(forwarding_channel,http_get,nbytes);</span><br><span class="line">	<span class="keyword">if</span> (nbytes != nwritten)</span><br><span class="line">	&#123;</span><br><span class="line">		ssh_channel_free(forwarding_channel);</span><br><span class="line">		<span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ssh_channel_free(forwarding_channel);</span><br><span class="line">	<span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-channel-open-forward"><a href="#ssh-channel-open-forward" class="headerlink" title="ssh_channel_open_forward()"></a>ssh_channel_open_forward()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_open_forward</span><span class="params">(ssh_channel channel,<span class="keyword">const</span> <span class="keyword">char</span>* remotehost,<span class="keyword">int</span> remoteport,<span class="keyword">const</span> <span class="keyword">char</span>* sourcehost,<span class="keyword">int</span> localport)</span></span></span><br></pre></td></tr></table></figure>

<p>端口一个TCP/IP转发信道</p>
<p>参数:</p>
<ul>
<li>channel 分配的信道</li>
<li>remotehost 将要连接的远程地址(域名或IP)</li>
<li>remoteport 远程端口</li>
<li>sourcehost 连接请求的来源主机的数字IP.主要用于记录</li>
<li>localport  发起连接的来源主机的端口.主要用于记录</li>
</ul>
<p>返回:SSH_OK;SSH_ERROR;SSH_AGAIN;</p>
<blockquote>
<p><strong>Warning:</strong></p>
</blockquote>
<blockquote>
<p>该函数不绑定本地端口,也不会自动将套接字的内容发送到信道,仍需要调用channel_read()和channel_write()</p>
</blockquote>
<h4 id="ssh-select"><a href="#ssh-select" class="headerlink" title="ssh_select()"></a>ssh_select()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_select</span><span class="params">(ssh_channel* channels, ssh_channel* outchannels, <span class="keyword">socket_t</span> maxfd, fd_set* readfds, struct timeval* timeout)</span></span></span><br></pre></td></tr></table></figure>

<p>选择系统调用的封装</p>
<p>与select(2)有些类似.不支持重写或异常处理</p>
<p>参数:</p>
<ul>
<li>channels 信道数组的指针由NULL终止,永不支持重写</li>
<li>outchannels 和信道相同大小的数组,不需要初始化</li>
<li>maxfd 来自readfds的最大文件描述符+1</li>
<li>readfds 被选择用于读取的文件描述符fd_set</li>
<li>timeout 毫秒单位超市</li>
</ul>
<p>返回:SSH_OK;SSH_ERROR;被打断时返回SSH_EINTR,重新开始即可</p>
<blockquote>
<p><strong>Warning:</strong></p>
</blockquote>
<blockquote>
<p>libssh在此不可重入(递归调用).意味着在调用此函数时收到了信号,时柄口语调用其他libssh函数的</p>
</blockquote>
<h3 id="反向端口转发"><a href="#反向端口转发" class="headerlink" title="反向端口转发"></a>反向端口转发</h3><p>远程端口转发是有服务器发起的,从服务器向客户端转发,即使客户端主动建立隧道.一旦隧道建成,服务器将持续监听某个端口,一旦端口产生连接,服务器向客户端转发数据</p>
<h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4><p>远程app-&gt;监听端口-&gt;SSH服务器 ===&gt; SSH客户端-&gt;本地端口-&gt;本地app</p>
<h4 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h4><pre><code> Local mail server    Mail client application
         ^                     |
         |               5555 (任意端口)
     143 (IMAP2)               |
         |                     V
    SSH client   &lt;=====   SSH server

图例:
 --P--&gt;: 通过端口P连接端口
 =====&gt;: SSH信道</code></pre><p>客户端建立隧道,但将用于将服务器上建立的连接转发给客户端</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">web_server</span><span class="params">(ssh_session session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> rc;</span><br><span class="line">  ssh_channel channel;</span><br><span class="line">  <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> nbytes, nwritten;</span><br><span class="line">  <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> *helloworld = <span class="string">""</span></span><br><span class="line"><span class="string">"HTTP/1.1 200 OK\n"</span></span><br><span class="line"><span class="string">"Content-Type: text/html\n"</span></span><br><span class="line"><span class="string">"Content-Length: 113\n"</span></span><br><span class="line"><span class="string">"\n"</span></span><br><span class="line"><span class="string">"&lt;html&gt;\n"</span></span><br><span class="line"><span class="string">"  &lt;head&gt;\n"</span></span><br><span class="line"><span class="string">"    &lt;title&gt;Hello, World!&lt;/title&gt;\n"</span></span><br><span class="line"><span class="string">"  &lt;/head&gt;\n"</span></span><br><span class="line"><span class="string">"  &lt;body&gt;\n"</span></span><br><span class="line"><span class="string">"    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n"</span></span><br><span class="line"><span class="string">"  &lt;/body&gt;\n"</span></span><br><span class="line"><span class="string">"&lt;/html&gt;\n"</span>;</span><br><span class="line">  rc = ssh_channel_listen_forward(session, <span class="literal">NULL</span>, <span class="number">8080</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (rc != SSH_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error opening remote port: %s\n"</span>,</span><br><span class="line">            ssh_get_error(session));</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">  &#125;</span><br><span class="line">  channel = ssh_channel_accept_forward(session, <span class="number">60000</span>, &amp;port);</span><br><span class="line">  <span class="keyword">if</span> (channel == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error waiting for incoming connection: %s\n"</span>,</span><br><span class="line">            ssh_get_error(session));</span><br><span class="line">    <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    nbytes = ssh_channel_read(channel, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (nbytes &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error reading incoming data: %s\n"</span>,</span><br><span class="line">              ssh_get_error(session));</span><br><span class="line">      ssh_channel_send_eof(channel);</span><br><span class="line">      ssh_channel_free(channel);</span><br><span class="line">      <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(buffer, <span class="string">"GET /"</span>, <span class="number">5</span>)) <span class="keyword">continue</span>;</span><br><span class="line">    nbytes = <span class="built_in">strlen</span>(helloworld);</span><br><span class="line">    nwritten = ssh_channel_write(channel, helloworld, nbytes);</span><br><span class="line">    <span class="keyword">if</span> (nwritten != nbytes)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error sending answer: %s\n"</span>,</span><br><span class="line">              ssh_get_error(session));</span><br><span class="line">      ssh_channel_send_eof(channel);</span><br><span class="line">      ssh_channel_free(channel);</span><br><span class="line">      <span class="keyword">return</span> SSH_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sent answer\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ssh_channel_send_eof(channel);</span><br><span class="line">  ssh_channel_free(channel);</span><br><span class="line">  <span class="keyword">return</span> SSH_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh-channel-listen-forward"><a href="#ssh-channel-listen-forward" class="headerlink" title="ssh_channel_listen_forward()"></a>ssh_channel_listen_forward()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_channel_listen_forward</span><span class="params">(ssh_session session, <span class="keyword">const</span> <span class="keyword">char</span>* address, <span class="keyword">int</span> port, <span class="keyword">int</span>* bound_port)</span></span></span><br></pre></td></tr></table></figure>

<p>发送”tcpip-forward”全局请求要求服务器开始监听入站连接</p>
<p>参数:</p>
<ul>
<li>session 发送请求的ssh会话</li>
<li>address 将要监听的服务器上的地址.发送NULL监听服务器支持的所有协议族的所有可用地址</li>
<li>port 要在服务器上绑定的端口.传递0让服务器分配下一个可以的非特权端口</li>
<li>bound_port 获取实际绑定端口的指针.传递NULL忽略该项</li>
</ul>
<p>返回:SSH_OK;SSH_ERROR;SSH_AGAIN</p>
<h4 id="ssh-channel-accept-forward"><a href="#ssh-channel-accept-forward" class="headerlink" title="ssh_channel_accept_forward()"></a>ssh_channel_accept_forward()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ssh_channel <span class="title">ssh_channel_accept_forward</span><span class="params">(ssh_session session, <span class="keyword">int</span> timeout_ms, <span class="keyword">int</span>* destination_port)</span></span></span><br></pre></td></tr></table></figure>

<p>接收传入的TCP/IP转发信道,并获取有关传入连接的信息</p>
<p>参数:</p>
<ul>
<li>session 使用的ssh会话</li>
<li>timeout_ms 以毫秒为单位的超时</li>
<li>destination_port 指向目的端口或NULL指针</li>
</ul>
<p>返回:新创建的信道或NULL</p>
<h3 id="X11隧道"><a href="#X11隧道" class="headerlink" title="X11隧道"></a>X11隧道</h3><h4 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h4><p>图形应用程序(X11客户端)-&gt;SSH服务器 ===&gt; SSH客户端 -&gt;本地展示(X11服务器)</p>
<p>由客户端创建SSH信道</p>
<h2 id="Chapter8-使用libssh的线程"><a href="#Chapter8-使用libssh的线程" class="headerlink" title="Chapter8: 使用libssh的线程"></a>Chapter8: 使用libssh的线程</h2><p>libssh可以用于多线程应用程序,但<strong>注意</strong>:</p>
<ul>
<li>线程必须在初始化libssh期间初始化,该初始化必须在任何线程上下文以为完成</li>
<li>如果应用程序使用pthreads,则必须链接libssh_threads动态库并使用ssh_threads_pthreads线程对象初始化线程</li>
<li>如果应用程序正在使用其他线程库,则必须实现ssh_threads_callbacks_struct机构的所有方法,并用它初始化libssh</li>
<li>任何时候都可以在线程内部使用不同的会话,并行连接,在不同会话中读/写等.但不能在多个进程中使用单个会话(或单个会话的信道)</li>
</ul>
<h3 id="线程初始化"><a href="#线程初始化" class="headerlink" title="线程初始化"></a>线程初始化</h3><p>先调用ssh_threads_set_callbacks()选择要使用的线程模型,然后调用ssh_init()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/callback.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ssh_threads_set_callbacks(ssh_threads_get_noop());</span><br><span class="line">ssh_init();</span><br></pre></td></tr></table></figure>

<p>ssh_threads_noop时不执行任何操作的线程结构,时不适用线程时默认使用的线程回调</p>
<h4 id="ssh-threads-set-callbacks"><a href="#ssh-threads-set-callbacks" class="headerlink" title="ssh_threads_set_callbacks()"></a>ssh_threads_set_callbacks()</h4><p>定义:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ssh_threads_set_callbacks</span><span class="params">(struct ssh_threads_callbacks_struct* cb)</span></span></span><br></pre></td></tr></table></figure>

<p>设置线程回调结构</p>
<p>如果要以多线程方式使用libssh,则该函数时必须的.在调用ssh_init()之前,必须调用该函数,而不是在线程上下文</p>
<p>参数:cb 指向ssh_threads_callbacks_struct结构的指针,包含要设置的不同回调</p>
<p>返回:总返回SSH_OK</p>
<h3 id="在libssh中使用libpthread"><a href="#在libssh中使用libpthread" class="headerlink" title="在libssh中使用libpthread"></a>在libssh中使用libpthread</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libssh/callbacks.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ssh_threads_set_callbacks(ssh_threads_get_pthread());</span><br><span class="line">ssh_init();</span><br></pre></td></tr></table></figure>

<p>必须确保与ssh_threads链接.如果使用gcc,必须使用命令行</p>
<pre><code>gcc -o output input.c -lssh -lssh_threads</code></pre>]]></content>
      <categories>
        <category>协议</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh-protocol</title>
    <url>/2019/06/18/ssh-protocol/</url>
    <content><![CDATA[<h1 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h1><p>这是一篇去年学习ssh协议时写的文，基本上是SSH标准协议的翻译，放上来仅供参考，里边的一些细节我也有些忘记了。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>SSH是Secure SHell的缩写，即安全外壳协议，是一种在不安全网络提供安全远程登陆以及其他安全网络服务的协议。SSH是建立在应用层基础上的安全协议，可以有效防止远程管理过程中的信息泄露问题。<a id="more"></a></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>提供网络服务程序功能，加密传输数据，可抵抗中间人攻击。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>替代Telnet进行远程通信</li>
<li>提供安全FTP服务</li>
<li>为POP、PPP协议提供安全信道</li>
</ul>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>SSH协议由三个子协议组成：传输层协议(SSH-TRANS)、用户认证协议(SSH-USERAUTH)、连接协议(SSH-CONNECT)</p>
<h3 id="SSH-TRANS"><a href="#SSH-TRANS" class="headerlink" title="SSH-TRANS"></a>SSH-TRANS</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>安全的低级传输协议。提供服务器认证，保密性和完整性，还提供压缩功能。</p>
<p>通常运行在TCP/IP连接上，也可用于其他可靠数据流上。</p>
<p>身份验证是居于主机的，不执行用户认证，更高层的用户认证协议可以基于此协议设计。</p>
<h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><p>通过TCP/IP使用时，端口默认为22</p>
<h5 id="协议版本交换"><a href="#协议版本交换" class="headerlink" title="协议版本交换"></a>协议版本交换</h5><p>标识字符串：</p>
<pre><code>SSH-protoversion-softwareversion SP comments CR LF</code></pre><p>‘protoversion’是”2.0”（现多为SSH2版本），’comments’字符串可选，若包含’comments’字符串,SP字符(空格符,ASCII 32)务必将’softwareversion’和’comments’字符串分开。标识字符串必须由单个CR字符(回车符，ASCII 13)和单个LF字符（换行符，ASCII 10）终止。</p>
<p>字符串中不能出现其他的空字符，最大长度为255个字符(包含回车和换行)，在回车和换行(CR LF)之前的标识字符串部分用于Diffie-Hellman密钥交换。</p>
<p>实例：</p>
<pre><code>SSH-2.0-OpenSSH CR LF</code></pre><h5 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h5><p>服务端为新版本，客户端为旧版本时，服务端可兼容旧版协议</p>
<p>服务端为旧版本，客户端为新版本时，服务端无法识别，须使用旧版本访问</p>
<h5 id="数据包格式"><a href="#数据包格式" class="headerlink" title="数据包格式"></a>数据包格式</h5><pre><code>uint32    packet_length
byte      padding_length
byte[n1]  payload; n1 = packet_length - padding_length - 1
byte[n2]  random padding; n2 = padding_length
byte[m]   mac (Message Authentication Code - MAC); m = mac_length</code></pre><p>packet_length 数据包的长度(以字节为单位)，不包括’mac’或’packet_length’字段本身。</p>
<p>padding_length 随机填充字节的长度</p>
<p>payload 有效载荷：数据包的游泳内容。默认压缩为无，已协商压缩，此字段将被压缩</p>
<p>random padding 随机填充：任意长度的填充，使得总长度是密码块大小或8的倍数，取其较大者。必须至少由四个字节的填充，最大填充量是255个字节</p>
<p>mac 消息认证码，默认为无，若一些上，此字段包含MAC字节</p>
<h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><p>可选压缩，已协商压缩，则使用协商算法压缩“有效载荷”。</p>
<p>压缩方法：zlib可选ZLIB(LZ77)压缩</p>
<h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><p>加密算法和密钥将在密钥交换期间进行协商。当加密生效时，每个数据包的数据包长度，填充长度，有效载荷和填充字段必须用给定算法加密。</p>
<h5 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h5><p>数据完整性通过在每个数据包中包含从共享密钥，数据包序列号和数据包内容计算出的MAC来加以保护。</p>
<p>消息认证算法和密钥在密钥交换期间进行协商，根据协商算法，计算方式为：</p>
<pre><code>mac = MAC（key，sequence_number || unencrypted_packet）</code></pre><p>unencrypted_packet是没有’mac’的整个分组</p>
<p>sequence_number是一个隐含的包序列号，表示为unit32格式</p>
<h5 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h5><p>采用Diffie-Hellman方法。密钥交换（kex）始于每边发送支持算法的名称列表</p>
<p>产生两个制：一个共享密钥K和一个交换散列H。加密和认证密钥来自于这两个值</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li>客户端和服务器端想对方发送SSH版本识别字符串</li>
<li>收到版本字符串后，双方通过质地的那个格式二进制包进行通信</li>
<li>在传输完版本字符串后，客户端和服务端开始进行密钥交换(key exchange，简称kex)。Kex用来让客户端和服务器生成本次通信的密钥和序列号。在kex的最后一步，服务器给客户端发送他的公钥，客户端查询本地的known_hosts查找志告公钥验证服务器身份。在kex之后，客户端进行SSH-AUTH，请求服务器验证自己的身份。</li>
</ol>
<h3 id="SSH-AUTH"><a href="#SSH-AUTH" class="headerlink" title="SSH-AUTH"></a>SSH-AUTH</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>SSH认证协议提供了客户端认证功能，向服务器发起请求，验证客户端的合法性。</p>
<h4 id="认证方法"><a href="#认证方法" class="headerlink" title="认证方法"></a>认证方法</h4><ol>
<li>password 密码验证</li>
<li>public key 无密码公钥验证</li>
<li>hostbased 基于主机的身份验证</li>
</ol>
<h4 id="规范-1"><a href="#规范-1" class="headerlink" title="规范"></a>规范</h4><h5 id="身份验证请求"><a href="#身份验证请求" class="headerlink" title="身份验证请求"></a>身份验证请求</h5><p>消息格式：</p>
<pre><code>byte      SSH_MSG_USERAUTH_REQUEST
string    user name(UTF-8)
string    service name(ASCII)
string    method name(ASCII)
....      method specific fields</code></pre><p>如果用户名和服务名称发生改变，则断开连接</p>
<p>定义的方法名(method name)：</p>
<pre><code>&quot;publickey&quot;             REQUIRED
&quot;password&quot;              OPTIONAL
&quot;hostbased&quot;             OPTIONAL
&quot;none&quot;                  NOT RECOMMENDED</code></pre><h5 id="认证协议消息号码"><a href="#认证协议消息号码" class="headerlink" title="认证协议消息号码"></a>认证协议消息号码</h5><p>一般的认证信息代码：</p>
<pre><code>SSH_MSG_USERAUTH_REQUEST            50
SSH_MSG_USERAUTH_FAILURE            51
SSH_MSG_USERAUTH_SUCCESS            52
SSH_MSG_USERAUTH_BANNER             53</code></pre><p>此外还有一些为方法特定的消息保留的消息编号(60到79)</p>
<h5 id="认证方法-1"><a href="#认证方法-1" class="headerlink" title="认证方法"></a>认证方法</h5><p><strong>1.公钥认证方法：publickey</strong></p>
<p>a. 客户端创建自己的密钥对，将公钥提交到需要访问的服务器上。</p>
<p>b. 客户端向服务器发起请求，请求用私钥签名进行认证。请求报文：</p>
<pre><code>byte      SSH_MSG_USERAUTH_REQUEST
string    user name
string    service name
string    &quot;publickey&quot;
boolean   TRUE
string    public key algorithm name
string    public key to be used for authentication
string    signature</code></pre><p>其中签名项的内容为：</p>
<pre><code>string    session identifier
byte      SSH_MSG_USERAUTH_REQUEST
string    user name
string    service name
string    &quot;publickey&quot;
boolean   TRUE
string    public key algorithm name
string    public key to be used for authentication</code></pre><p>c. 服务器收到请求后，在公钥目录中查找对应用户，如果存在，则产生一个随机字符串，用公钥加密后发送给用户。</p>
<p>d. 用户收到字符串后，用自己的私钥进行解密，将解密后的字符串发送给服务器。</p>
<p>e. 服务器接收到字符串后与之前生成的随机字符串进行对比，如果一致，则允许用户登陆。</p>
<p><strong>2.密码验证方法：password</strong></p>
<p>客户端向服务器发起请求，发送包含自己用户名和对应密码的数据包，格式为：</p>
<pre><code>byte      SSH_MSG_USERAUTH_REQUEST
string    user name
string    service name
string    &quot;password&quot;
boolean   FALSE
string    plaintext password(UTF-8)</code></pre><p>数据包由传输层进行加密</p>
<p><strong>3.基于主机的身份验证:hostbased</strong></p>
<p>通过来源主机和用户名进行身份验证，客户端发送消息请求身份认证，格式为：</p>
<pre><code>byte      SSH_MSG_USERAUTH_REQUEST
string    user name
string    service name
string    &quot;hostbased&quot;
string    public key algorithm for host key
string    public host key and certificates for client host
string    client host name expressed as the FQDN(ASCII)
string    user name on the client host(UTF-8)
string    signature</code></pre><p>签名的值为：</p>
<pre><code>string    session identifier
byte      SSH_MSG_USERAUTH_REQUEST
string    user name
string    service name
string    &quot;hostbased&quot;
string    public key algorithm for host key
string    public host key and certificates for client host
string    client host name expressed as the FQDN(ASCII)
string    user name on the client host(UTF-8)</code></pre><h3 id="SSH-CONN"><a href="#SSH-CONN" class="headerlink" title="SSH-CONN"></a>SSH-CONN</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>提供交互式登陆会话，远程执行命令，转发TCP/IP连接和转发X11连接。</p>
<h4 id="channel机制"><a href="#channel机制" class="headerlink" title="channel机制"></a>channel机制</h4><p>所有终端会话，转发连接等都是通过建立channel来通信的。任何一方都可以打开一个信道。多个信道被复用成一个单一的连接。</p>
<p>信道由末尾的数字进行标识。</p>
<p>信道是流量控制的。只有标为可用的窗口空间才可以发送数据。</p>
<h5 id="打开信道"><a href="#打开信道" class="headerlink" title="打开信道"></a>打开信道</h5><p>任何一端都可以开启一个新的信道，并分配一个本地信道号。发送请求,包含本地信道号和初始窗口大小。请求格式：</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN
string    channel type(ASCII)
uint32    sender channel
uint32    initial window size
uint32    maximum packet size
....      channel type specific data follows</code></pre><p>远端回复是否可以打开信道：</p>
<p>打开信道 SSH_MSG_CHANNEL_OPEN_CONFIRMATION：</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN_CONFIRMATION
uint32    recipient channel
uint32    sender channel
uint32    initial window size
uint32    maximum packet size
....      channel type specific data follows</code></pre><p>打开失败  SSH_MSG_CHANNEL_OPEN_FAILURE：</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN_FAILURE
uint32    recipient channel
uint32    reason code
string    description(UTF-8)
string    language tag</code></pre><p>原因代码(reason code)显示打开失败的原因</p>
<h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>在打开新的信道时窗口大小已经规定，可以通过以下消息进行调整：</p>
<pre><code>byte      SSH_MSG_CHANNEL_WINDOW_ADJUST
uint32    recipient channel
uint32    bytes to add</code></pre><p>窗口大小指定对方可以发送多少个字节。</p>
<p>数据传输的消息格式：</p>
<pre><code>byte      SSH_MSG_CHANNEL_DATA
uint32    recipient channel
string    data</code></pre><h4 id="关闭信道"><a href="#关闭信道" class="headerlink" title="关闭信道"></a>关闭信道</h4><p>当一方不再发送更多数据到一个信道时，应该发送SSH_MSG_CHANNEL_EOF，格式为：</p>
<pre><code>byte      SSH_MSG_CHANNEL_EOF
uint32    recipient channel</code></pre><p>当任何一方希望终止信道时，发送SSH_MSG_CHANNEL_CLOSE。收到此消息后，另一方必须回复一个SSH_MSG_CHANNEL_CLOSE。则该信道被视为已关闭。</p>
<h4 id="特定信道请求"><a href="#特定信道请求" class="headerlink" title="特定信道请求"></a>特定信道请求</h4><p>许多信道类型值具有特定信道类型的扩展名。特定信道的请求格式为：</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    request type(ASCII)
boolean   want reply
....      type-specific data follows</code></pre><h3 id="交互会话"><a href="#交互会话" class="headerlink" title="交互会话"></a>交互会话</h3><p>会话是程序的远程执行，该程序可以是shell，应用程序，系统命令或者某些内置子系统。会涉及到虚拟终端，X11转发。可以同时激活多个会话。</p>
<h4 id="开始会话"><a href="#开始会话" class="headerlink" title="开始会话"></a>开始会话</h4><p>通过发送以下消息开始会话：</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN
string    &quot;session&quot;
uint32    sender channel
uint32    initial window size
uint32    maximum packet size</code></pre><h4 id="请求一个伪终端"><a href="#请求一个伪终端" class="headerlink" title="请求一个伪终端"></a>请求一个伪终端</h4><p>通过发送以下消息请求一个伪终端：</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;pty-req&quot;
boolean   want_reply
string    TERM environment variable value
uint32    terminal width, characters
uint32    terminal height, rows
uint32    terminal width, pixels
uint32    terminal height, pixels
string    encoded terminal modes</code></pre><h4 id="X11转发"><a href="#X11转发" class="headerlink" title="X11转发"></a>X11转发</h4><h5 id="请求X11转发"><a href="#请求X11转发" class="headerlink" title="请求X11转发"></a>请求X11转发</h5><p>通过发送SSH_MSG_CHANNEL_REQUEST消息请求X11转发：</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;x11-req&quot;
boolean   want reply
boolean   single connection
string    x11 authentication protocol
string    x11 authentication cookie
uint32    x11 screen number</code></pre><h5 id="X11信道"><a href="#X11信道" class="headerlink" title="X11信道"></a>X11信道</h5><p>X11信道以信道开启请求的形式开启，请求通过的结果是开启一个独立于会话的信道，关闭会话信道不会关闭X11转发信道。请求格式为:</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN
string    &quot;x11&quot;
uint32    sender channel
uint32    initial window size
uint32    maximum packet size
string    originator address
uint32    originator port</code></pre><p>接受到请求的一方应使用SSH_MSG_CHANNEL_OPEN_CONFIRMATION开启信道或者SSH_MSG_CHANNEL_OPEN_FAILURE开启信道失败进行响应。</p>
<h4 id="环境变量传递"><a href="#环境变量传递" class="headerlink" title="环境变量传递"></a>环境变量传递</h4><p>环境变量可以传递给shell/command。请求格式为：</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;env&quot;
boolean   want reply
string    variable name
string    variable value</code></pre><h4 id="启动shell-command"><a href="#启动shell-command" class="headerlink" title="启动shell/command"></a>启动shell/command</h4><p>会话建立时，远程终端的一个程序开启。这个程序可以是shell，应用程序，或者独立于主机的子系统。</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;shell&quot;
boolean   want reply</code></pre><p>该消息请求开启一个用户默认的shell</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;exec&quot;
boolean   want reply
string    command</code></pre><p>该消息请求服务器执行给定的命令。’command’字符串可能包含一个路径。</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;subsystem&quot;
boolean   want reply
string    subsystem name</code></pre><p>该消息请求开启一个预定义的子系统。</p>
<h5 id="会话数据传输"><a href="#会话数据传输" class="headerlink" title="会话数据传输"></a>会话数据传输</h5><p>会话的数据传输使用SSH_MSG_CHANNEL\DATA和SSH_MSG_CHANNEL_EXTENDED_DATA包和窗口机制。SSH_MSG_CHANNEL_EXTENDED_DATA已被定义为stderr数据。</p>
<h4 id="其他控制消息"><a href="#其他控制消息" class="headerlink" title="其他控制消息"></a>其他控制消息</h4><ol>
<li>窗口尺寸更改消息</li>
<li>本地流量控制</li>
<li>信号</li>
</ol>
<h4 id="返回退出状态"><a href="#返回退出状态" class="headerlink" title="返回退出状态"></a>返回退出状态</h4><p>在另一端的命令终止时，会返回命令的退出状态。收到消息后，通过SSH_MSG_CHANNEL_CLOSE关闭信道。消息格式如下:</p>
<pre><code>byte      SSH_MSG_CHANNEL_REQUEST
uint32    recipient channel
string    &quot;exit-signal&quot;
boolean   FALSE
string    signal name (without the &quot;SIG&quot; prefix)
boolean   core dumped
string    error message(UTF-8)
string    language tag</code></pre><h3 id="TCP-IP端口转发"><a href="#TCP-IP端口转发" class="headerlink" title="TCP/IP端口转发"></a>TCP/IP端口转发</h3><h4 id="请求端口转发"><a href="#请求端口转发" class="headerlink" title="请求端口转发"></a>请求端口转发</h4><p>请求消息格式：</p>
<pre><code>byte      SSH_MSG_GLOBAL_REQUEST
string    &quot;tcpip-forward&quot;
boolean   want reply
string    address to bind
uint32    port number to bind</code></pre><h4 id="TCP-IP转发信道"><a href="#TCP-IP转发信道" class="headerlink" title="TCP/IP转发信道"></a>TCP/IP转发信道</h4><p>当连接达到远程转发的端口被请求时，打开一个信道将端口转发给另一个端口侧。请求消息格式：</p>
<pre><code>byte      SSH_MSG_CHANNEL_OPEN
string    &quot;forwarded-tcpip&quot;
uint32    sender channel
uint32    initial window size
uint32    maximum packet size
string    address that was connected
uint32    port that was connected
string    originator IP address
uint32    originator port</code></pre><h2 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h2><ol>
<li>版本号协商阶段，通信双方确定使用的协议版本</li>
<li>密钥和算法协商阶段，通信双方协商出最终使用的算法</li>
<li>认证阶段，SSH客户端向服务器端发起认证请求，服务器端对客户端进行认证</li>
<li>会话请求阶段，认证通过后，客户端向服务器端发送会话请求</li>
<li>交互会话阶段，会话请求通过后，服务器端和客户端进行交互会话</li>
</ol>
]]></content>
      <categories>
        <category>协议</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>tls</title>
    <url>/2019/06/18/tls/</url>
    <content><![CDATA[<h1 id="SSL-TLS协议"><a href="#SSL-TLS协议" class="headerlink" title="SSL/TLS协议"></a>SSL/TLS协议</h1><h2 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h2><p>关于SSL/TLS的历史和作用此处按下不表，可以检索相关文章进行了解。在建目录的时候，我还认证考虑了一下应该将SSL/TLS归类到几层协议中，经过思考和查找资料，我决定放弃，SSL/TLS协议基本上可以分为握手协议，和传输协议两部分，介于TCP和HTTP协议之间，可能并不太适用于与OSI模型进行匹配。<a id="more"></a></p>
<p>终于忙完了期末的若干事情，回来把这篇只开了头的文章写完。</p>
]]></content>
      <categories>
        <category>协议</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-charset</title>
    <url>/2019/06/17/mysql-charset/</url>
    <content><![CDATA[<h1 id="数据库系列-1"><a href="#数据库系列-1" class="headerlink" title="数据库系列 1"></a>数据库系列 1</h1><h2 id="—MySQL数据库协议之字符集与排序"><a href="#—MySQL数据库协议之字符集与排序" class="headerlink" title="—MySQL数据库协议之字符集与排序"></a>—MySQL数据库协议之字符集与排序</h2><h3 id="开篇碎碎念"><a href="#开篇碎碎念" class="headerlink" title="开篇碎碎念"></a>开篇碎碎念</h3><p>​        因为日常工作与数据库打交道，先准备写点简单的自己关于数据库的认识。今天刚好在看有关字符集协商的问题，简单的开篇讲一下MySQL中的字符集设定。</p>
<p>​        MySQL数据库的设置与其协议都是简洁且自由度高的，这两种特性综合起来就导致了在使用MySQL数据库中会遇到一些由于灵活的配置导致的坑。</p>
<p>​        可能很多人都遇到过一个问题，就是在使用MySQL数据库时，会发先一些中文字符或者表情产生了乱码。或者使用了较新的客户端去连接服务器的时候，产生了类似于「ERROR 1115 (42000): Unknown character set: ‘utf8mb4’」这样连接失败的错误。<a id="more"></a></p>
<h3 id="MySQL中的字符集"><a href="#MySQL中的字符集" class="headerlink" title="MySQL中的字符集"></a>MySQL中的字符集</h3><h4 id="character-sets"><a href="#character-sets" class="headerlink" title="character sets"></a>character sets</h4><p>​        MySQL中的字符集由两部分构成，一是字符的编码方式(character sets)，二是编码的排序方式(collation)。看字面意思，编码方式就是单个字符的编码，排序方式就是比较字符之间顺序的规则。网上搜索相关的内容大多重复讲了这一点。</p>
<p>​        要搞清楚字符集，首先要弄明白字符集在什么时候需要。字符集是我们可见的字符在计算机中存储的一种方式，每个字符根据规则按照一定长度存储为十六进制（二进制）的值，而这个值如何解释则决定了它在打印时产生的字符。</p>
<p>​        首先要明确一个分类，字符集在数据库中有两大类的使用（我个人的理解，如有纰漏请指正）。我感觉网上现有的解释都混淆了这两类使用，导致不容易理解。</p>
<ul>
<li>存储使用</li>
<li>传输使用</li>
</ul>
<p>​        存储使用，就是在数据库服务端，对数据进行存储时使用的编码格式。在MySQL数据库中的表现为server, database, table, column四个层次的字符集设置，可以很详细地设定字符集。这个一般是在设计数据库时定义的，和我们要存储的数据的类型有关，通常也要同时确认其排序规则，关于排序规则后问再讲。</p>
<p>​        传输使用，发生在客户端（官方客户端或者我们自己的程序或者代理软件等等）和数据库服务器进行交互时。客户端和服务器交互，必然要进行通信，不论上层的封装是基于tcp/ip，还是pipe转发，本地套接字，其应用层的数据库协议都是相同的。服务端从库中取出数据，按照存储的字符集设定解释，然后再按照某种编码方式传输给客户端，客户端按照这种编码方式解释数据流；反之亦然。</p>
<p>​        如果我们自己来设计，服务器、客户端、传输协议中的编码方式最好是统一的，这样能够用最少的解释和编码过程。MySQL数据库的做法是让客户端声明一种编码方式，然后服务器与客户端的通信都使用同一种编码方式。在MySQL协议的握手过程中，服务端先发送第一个包，客户端在返回包时声明了自己要用的字符集以及排序方式。（字符集对排序方式是一对多的关系，因此也可以理解为只需要传输特定的排序方式）这个排序方式以一个字节的十六进制值表示。服务端收到这个字符集/排序方式后，查看自己是否支持，如果支持，则采用该方式进行编码解码，进行通行。如果不支持，则产生回退过程，服务器将自己支持的字符集发送给客户端，进行协商，客户端选择一种进行支持，或者双方无法达成一致，断开连接。可以说，在通信过程中，字符集的选择主要取决于客户端的声明。这一个字符集最后的表现形式为三项设定：character_set_client, character_set_results和character_set_connection。可以使用以下语句进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character\_set\_%'</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到这三项的值是统一的。据我现在的调研，各种客户端基本都不支持设置默认字符集，不同的客户端版本自己会声明一种字符集，5.5之前多数为latin1，5.7以后基本上都是utf8mb4，所以坑多为5.5.-5.7之间，可能存在声明utf8的字符集。<del>一些比较奇怪的声明是客户端将这一标志位声明为0xff即255，但并没有对应的字符集，我猜测这可能是声称自己自持现有的所有字符集</del>。可能是看到的文档版本不太对，最新的8.0.16文档中0xff(255)即是utf8mb4的标志。</p>
<p>​        客户端的配置项不提供指定字符集的方式，我们可以直接修改服务器中的三项设定</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> character_set_client = charset_name;</span><br><span class="line"><span class="keyword">SET</span> character_set_results = charset_name;</span><br><span class="line"><span class="keyword">SET</span> character_set_connection = charset_name;</span><br></pre></td></tr></table></figure>

<p>一般来说使用匹配版本的客户端和服务器，能够避免大量问题，如果要自己指定通信时的字符集，推荐5.1之前都使用latin1（5.5之前不止此utf8mb4编码），5.5以后都可以使用utf8mb4编码。<strong>注意：ucs2，utf16，utf32是不被支持的。</strong></p>
<p>​        而关于之前容易产生的两种错误，第一个乱码的情况，一般是因为字符集不统一导致解码错误。在MySQL中，多数表现为按照utf8格式进行编码时产生的。因为历史遗留问题，MySQL中的一个坑是其utf8编码并不是我们通常认知中的utf8编码，这是一种最大长度为3字节的编码，因此当字符的长度是4字节时，解析就会出现错误，导致乱码的出现。MySQL官方也终于在MySQL5.5版本开始支持了4字节uft8，即utf8mb4字符集。第二个错误是使用了较高的（默认版本为5.7+）客户端连接较老的服务器（5.1），导致后续客户端申请更换字符集时遭到了拒绝。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> <span class="string">'utf8mb4'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="collations"><a href="#collations" class="headerlink" title="collations"></a>collations</h4><p>​        排序方式是比较单个字符顺序的规则定义，比如忽视大小写，则A与a的排序是等同的；而b则应该排在a之后。每个字符编码方式都对应一种默认的排序方式。</p>
<h3 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h3><p>​        第一次写文章，思路不够清晰，可能存在问题的地方也比较多，希望接下来能够清晰地做一个数据库专题，尤其是关于数据库协议相关的内容。</p>
<p><strong>引用</strong></p>
<blockquote>
<p><a href="https://dev.mysql.com/doc/refman/5.5/en/charset-connection.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.5/en/charset-connection.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>database</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>开篇</title>
    <url>/2019/06/13/index/</url>
    <content><![CDATA[<p>经过使用Jekyll搭建，再转向hexo，用next主题建起了博客；期间也入了OS X的坑。填了一些坑，走了一些歪路，总算是建起来了，也算是步入正轨。</p>
<p>博客中主要写一些技术分享的文章，看心情可能也会有日常记录。主要关注数据库技术，网络相关技术，各种协议以及关于服务器部署的相关技术。环境主要基于Linux/OS X，语言主要是C/go（未来希望能够熟悉C++，其他语言视需求扩展）。</p>
]]></content>
  </entry>
</search>
